<!-- Build file -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(WebSdkTools)\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.SubmitCodeSignJob" />
  <UsingTask AssemblyFile="$(WebSdkTools)\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.WaitForCodeSignJobs" />

  <!-- 
    Variables that can be overriden by CI machine (official build):
    
      - CoreSdkVersion - specifies full version of core sdk package
      - CoreSdkPackagesDropDir - root drop dir that contains versioned build folders, e.g. \\cpvsbuild\Drops\Roslyn\Roslyn-Project-System\DotNet-Core-Sdk
      - WebSdkVersion -  web sdk full version
      - WebSdkPackagesDropDir [Required] - official drop folder path for web packages
  -->

  <PropertyGroup>
    <CoreSdkDropDir Condition="'$(CoreSdkDropDir)' == ''">\\cpvsbuild\Drops\Roslyn\Roslyn-Project-System\DotNet-Core-Sdk</CoreSdkDropDir>
    <VersionPrefix Condition="'$(VersionPrefix)' == ''">2.0.0</VersionPrefix>
    <VersionPrereleasePrefix Condition="'$(VersionPrereleasePrefix)' == ''">preview2</VersionPrereleasePrefix>
    <PackagesOutputPath>$(WebSdkRoot)\bin\$(Configuration)\NuGet</PackagesOutputPath>
    <LocalDropRoot>$(WebSdkRoot)\bin\$(Configuration)</LocalDropRoot>
    <CodeSignOutputPath>$(WebSdkRoot)\bin\Signed</CodeSignOutputPath>
    <NugetExe>$(WebSdkRoot)\tools\NuGet\NuGet.exe</NugetExe>
  </PropertyGroup>

  <ItemGroup>
    <ProjectFiles Include="pack\Microsoft.NET.Sdk.Publish\Microsoft.NET.Sdk.Publish.csproj" />
    <ProjectFiles Include="pack\Microsoft.NET.Sdk.Web.ProjectSystem\Microsoft.NET.Sdk.Web.ProjectSystem.csproj" />
    <ProjectFiles Include="pack\Microsoft.NET.Sdk.Web\Microsoft.NET.Sdk.Web.csproj" />
  </ItemGroup>

  <UsingTask TaskName="GetCoreSdkBuildVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <CoreSdkDropDir ParameterType="System.String" Required="true" />
      <CoreSdkBuildVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            CoreSdkBuildVersion = "";
            if (!Directory.Exists(CoreSdkDropDir))
            {
                return false;
            }

            var coreSdkDropDirInfo = new DirectoryInfo(CoreSdkDropDir);
            var subDirs = coreSdkDropDirInfo.EnumerateDirectories("*.*", SearchOption.TopDirectoryOnly);
            if (subDirs != null && subDirs.Count() > 0)
            {
                CoreSdkBuildVersion = subDirs.OrderByDescending(x => x.LastWriteTime)
                                             .First().Name;
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Build" DependsOnTargets="Init;_Build"/>

  <Target Name="Init" DependsOnTargets="_InitCoreSdk;_InitWebSdk">
  </Target>

  <Target Name="_InitCoreSdk" Condition="'$(CoreSdkVersion)' == ''">
    <!-- 
      Runs if core sdk version and drop path were not provided
      (final release builds, should provide final versions (not pre-release ones))
    -->
    <GetCoreSdkBuildVersion CoreSdkDropDir="$(CoreSdkDropDir)">
      <Output PropertyName="CoreSdkBuildVersion" TaskParameter="CoreSdkBuildVersion" />
    </GetCoreSdkBuildVersion>

    <PropertyGroup>
      <CoreSdkVersion Condition="'$(CoreSdkVersion)' == ''">$(VersionPrefix)-$(VersionPrereleasePrefix)-$(CoreSdkBuildVersion)</CoreSdkVersion>
      <CoreSdkPackagesDropDir>$(CoreSdkDropDir)\$(CoreSdkBuildVersion)\Packages</CoreSdkPackagesDropDir>
    </PropertyGroup>
  </Target>

  <Target Name="_InitWebSdk" Condition="'$(WebSdkVersion)' == ''">
    <!-- 
      Runs if web sdk version was not provided
      (final release builds, should provide final versions (not pre-release ones))
    -->
    <PropertyGroup>
      <CurrentDate Condition="'$(CurrentDate)'==''">-$([System.DateTime]::Now.ToString(yyyyMMdd))</CurrentDate>
      <BUILD_NUMBER Condition="'$(BUILD_NUMBER)' == ''">1</BUILD_NUMBER>
      <BuildBranchName Condition="'$(BuildBranchName)' == ''">dev</BuildBranchName>
      <WebSdkVersion Condition="'$(WebSdkVersion)' == ''">$(VersionPrefix)-$(BuildBranchName)$(CurrentDate)-$(BUILD_NUMBER)</WebSdkVersion>
    </PropertyGroup>
  </Target>

  <Target Name="_RestoreSolution">
    <Exec Command="$(DOTNET_INSTALL_DIR)/dotnet restore $(WebSdkRoot)\Microsoft.Net.Sdk.Web.Sln /p:SkipInvalidConfigurations=true;configuration=Release" />
  </Target>

  <Target Name="_BuildProduct">
    <Exec Command="$(DOTNET_INSTALL_DIR)/dotnet build $(WebSdkRoot)\src\Publish\Microsoft.NET.Sdk.Publish.Tasks\Microsoft.NET.Sdk.Publish.Tasks.csproj /p:SkipInvalidConfigurations=true;configuration=Release" />
  </Target>

  <Target Name="_CopyArtifacts">
    <!--Copy publish sdks-->
    <Copy SourceFiles="$(WebSdkSource)\Publish\Microsoft.NET.Sdk.Publish.Targets\Sdk.props"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Publish\Sdk\Sdk.props"
        OverwriteReadOnlyFiles="true" />

    <Copy SourceFiles="$(WebSdkSource)\Publish\Microsoft.NET.Sdk.Publish.Targets\Sdk.targets"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Publish\Sdk\Sdk.targets"
        OverwriteReadOnlyFiles="true" />

    <!--Copy project system sdks-->
    <Copy SourceFiles="$(WebSdkSource)\ProjectSystem\Microsoft.NET.Sdk.Web.ProjectSystem.Targets\Sdk.props"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Web.ProjectSystem\Sdk\Sdk.props"
        OverwriteReadOnlyFiles="true" />

    <Copy SourceFiles="$(WebSdkSource)\ProjectSystem\Microsoft.NET.Sdk.Web.ProjectSystem.Targets\Sdk.targets"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Web.ProjectSystem\Sdk\Sdk.targets"
        OverwriteReadOnlyFiles="true" />

    <!--Copy web sdks-->
    <Copy SourceFiles="$(WebSdkSource)\Web\Microsoft.NET.Sdk.Web.Targets\Sdk.props"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Web\Sdk\Sdk.props"
        OverwriteReadOnlyFiles="true" />

    <Copy SourceFiles="$(WebSdkSource)\Web\Microsoft.NET.Sdk.Web.Targets\Sdk.targets"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Web\Sdk\Sdk.targets"
        OverwriteReadOnlyFiles="true" />

    <!-- Copy Publish targets and project system targets-->
    <PropertyGroup>
      <_PublishTargetDestination>$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Publish\build\netstandard1.0\</_PublishTargetDestination>
      <_ProjectSystemTargetDestination>$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Web.ProjectSystem\build\netstandard1.0\</_ProjectSystemTargetDestination>
    </PropertyGroup>

    <ItemGroup>
      <_PublishTargets Include="$(WebSdkSource)\Publish\Microsoft.NET.Sdk.Publish.Targets\netstandard1.0\**\*.*" />
      <_ProjectSystemTargets Include="$(WebSdkSource)\ProjectSystem\Microsoft.NET.Sdk.Web.ProjectSystem.Targets\netstandard1.0\**\*.*" />
    </ItemGroup>

    <Copy SourceFiles="@(_PublishTargets)"
        DestinationFiles="@(_PublishTargets -> '$(_PublishTargetDestination)%(RecursiveDir)%(FileName)%(Extension)')"
        OverwriteReadOnlyFiles="true" />

    <Copy SourceFiles="@(_ProjectSystemTargets)"
        DestinationFiles="@(_ProjectSystemTargets -> '$(_ProjectSystemTargetDestination)%(RecursiveDir)%(FileName)%(Extension)')"
        OverwriteReadOnlyFiles="true" />

    <!-- Copy Publish tasks-->
    <Copy SourceFiles="$(WebSdkbin)\Release\net46\win7-x86\Microsoft.NET.Sdk.Publish.Tasks.dll"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Publish\tools\net46\Microsoft.NET.Sdk.Publish.Tasks.dll"
        OverwriteReadOnlyFiles="true" />

    <Copy SourceFiles="$(WebSdkbin)\Release\netstandard1.3\Microsoft.NET.Sdk.Publish.Tasks.dll"
        DestinationFiles="$(DOTNET_INSTALL_DIR)\Sdk\$(DOTNET_VERSION)\Sdks\Microsoft.NET.Sdk.Publish\tools\netcoreapp1.0\Microsoft.NET.Sdk.Publish.Tasks.dll"
        OverwriteReadOnlyFiles="true" />

  </Target>

  <Target Name="_BuildTests">
    <Exec Command="$(DOTNET_INSTALL_DIR)/dotnet build $(WebSdkRoot)\test\Publish\Microsoft.NET.Sdk.Publish.Tasks.Tests\Microsoft.NET.Sdk.Publish.Tasks.Tests.csproj /p:SkipInvalidConfigurations=true;configuration=Release" />
  </Target>

  <Target Name="_RunTests">
    <Exec Command="$(DOTNET_INSTALL_DIR)/dotnet test $(WebSdkRoot)\test\Publish\Microsoft.NET.Sdk.Publish.Tasks.Tests\Microsoft.NET.Sdk.Publish.Tasks.Tests.csproj /p:SkipInvalidConfigurations=true;configuration=Release" />
  </Target>

  <Target Name="_GeneratePackages">
    <PropertyGroup>
      <CopyRetryProperties>Retries=20;RetryDelayMilliseconds=150</CopyRetryProperties>
    </PropertyGroup>

    <MSBuild Projects="@(ProjectFiles)" Targets="Restore;Build;Pack"
         Properties="$(CopyRetryProperties);CoreSdkVersion=$(CoreSdkVersion);WebSdkVersion=$(WebSdkVersion)" />
  </Target>

  <PropertyGroup>
    <_BuildDependsOn>
      $(_BuildDependsOn);
      _RestoreSolution;
      _BuildProduct;
      _CopyArtifacts;
      _BuildTests;
      _RunTests;
      _GeneratePackages;
    </_BuildDependsOn>
  </PropertyGroup>

  <Target Name="_Build" DependsOnTargets="$(_BuildDependsOn)" />

  <Target Name="_Publish">
    <!-- Generate semaphore files for core and web sdk -->
    <PropertyGroup>
      <WebSdkSemaphorePath>$(LocalDropRoot)\web-sdk.sem</WebSdkSemaphorePath>
    </PropertyGroup>

    <ItemGroup>
      <SemaphoreParameter Include="CoreSdkVersion=$(CoreSdkBuildVersion)" />
      <SemaphoreParameter Include="CoreSdkDropPath=$(CoreSdkDropDir)\$(CoreSdkBuildVersion)" />
      <SemaphoreParameter Include="WebSdkVersion=$(WebSdkVersion)"/>
      <SemaphoreParameter Include="WebSdkDropPath=$(WebSdkPackagesDropDir)" />
    </ItemGroup>

    <GenerateSemaphore Parameters="@(SemaphoreParameter)" SemaphoreFilePath="$(WebSdkSemaphorePath)" />

    <ItemGroup>
      <SignedPackages Include="$(CodeSignOutputPath)\Packages\*.nupkg" />
    </ItemGroup>

    <Exec Command="$(NugetExe) push %(SignedPackages.Identity) $(MyGetSecurityToken) -Source https://dotnet.myget.org/F/dotnet-web/api/v2/package" Condition="'$(MyGetSecurityToken)' != ''" />
  </Target>

  <UsingTask TaskName="GenerateSemaphore" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <Parameters ParameterType="System.String[]" Required="true" />
      <SemaphoreFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var builder = new StringBuilder();
            builder.AppendLine("[Semaphore]");
            foreach(var par in Parameters)
            {
              builder.AppendLine(par);
            }
            
            var retry = 5;
            while (retry > 0)
            {
              try
              {
                File.WriteAllText(SemaphoreFilePath, builder.ToString());
                break;
              }
              catch
              {
                System.Threading.Thread.Sleep(500);
                retry--;
              }
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Sign" />

  <Import Project="$(WebSdkTools)\Microsoft.NET.Sdk.Web.Sign.targets" Condition="Exists('$(WebSdkTools)\MIcrosoft.NET.Sdk.Web.Sign.targets')"/>
</Project>

