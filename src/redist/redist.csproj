<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.tasks))\dir.tasks" />
  <Import Project="$(RepoRoot)/build/MSBuildExtensions.targets" />

  <PropertyGroup>
    <VersionPrefix>$(CliVersionPrefix)</VersionPrefix>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <RuntimeFrameworkVersion>$(CLI_SharedFrameworkVersion)</RuntimeFrameworkVersion>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <CopyBuildOutputToPublishDirectory>false</CopyBuildOutputToPublishDirectory>
    <AssetTargetFallback>dotnet5.4</AssetTargetFallback>
    <PublishDir>$(CliOutputDirectory)</PublishDir>
    <VersionSuffix>$(CommitCount)</VersionSuffix>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETCore.App" Version="$(CLI_SharedFrameworkVersion)" />
    <!-- The project json migration commands depend on an older version of Roslyn.
         Lift the version here to match what tool_roslyn depends on (otherwise an older version will
         be added to the TPA when we crossgen and we won't be able to crossgen tool_roslyn -->
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="$(CLI_Roslyn_Version)" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\dotnet\dotnet.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="minimumMSBuildVersion">
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>

  <Target Name="PublishVersionFile"
          BeforeTargets="Publish">

    <WriteLinesToFile File="$(PublishDir)/.version"
                      Lines="$(CommitHash);$(SdkVersion);$(Rid)"
                      Overwrite="true" />
  </Target>

  <Target Name="GenerateCliRuntimeConfigurationFiles"
          AfterTargets="Publish">
    <RemoveAssetFromDepsPackages DepsFile="$(PublishDir)/$(TargetName).deps.json"
                                 SectionName="runtime"
                                 AssetPath="%(BundledToolProjects.Identity).dll" />

    <Copy SourceFiles="$(PublishDir)/$(TargetName).deps.json"
          DestinationFiles="$(PublishDir)/%(BundledTools.Identity).deps.json" />

    <Copy SourceFiles="$(PublishDir)/$(TargetName).runtimeconfig.json"
          DestinationFiles="$(PublishDir)/%(BundledTools.Identity).runtimeconfig.json" />

    <Delete Files="$(PublishDir)/$(TargetName).deps.json;
                   $(PublishDir)/$(TargetName).runtimeconfig.json;
                   $(PublishDir)/%(BundledToolProjects.Identity).dll" />

    <ChangeEntryPointLibraryName
          DepsFile="$(PublishDir)/%(BundledTools.Identity).deps.json"
          NewName="%(BundledTools.Identity).deps.json" />
  </Target>

  <Target Name="PublishMSBuildExtensions"
          DependsOnTargets="GenerateMSBuildExtensions"
          AfterTargets="Publish"
          BeforeTargets="GenerateCliRuntimeConfigurationFiles">
    <ItemGroup>
      <MSBuildExtensionsContent Update="@(MSBuildExtensionsContent)">
        <DestinationPath Condition="'%(MSBuildExtensionsContent.DestinationPath)' == ''">$(PublishDir)/%(MSBuildExtensionsContent.DeploymentSubpath)%(RecursiveDir)%(Filename)%(Extension)</DestinationPath>
      </MSBuildExtensionsContent>
    </ItemGroup>
    
    <Copy SourceFiles="@(MSBuildExtensionsContent)"
          DestinationFiles="%(MSBuildExtensionsContent.DestinationPath)" />
  </Target>

  <!-- The msdia140typelib_clr0200.dll file is not MIT licensed (and it only used on Windows). Remove it, so
       we can MIT license the published dotnet -->
  <Target Name="RemoveMSDiaTypeLib"
          AfterTargets="Publish"
          Condition="'$(OSName)' != 'win'">
    <Delete Files="$(PublishDir)/TestHost/msdia140typelib_clr0200.dll" />
  </Target>

  <Target Name="PublishSdks"
          AfterTargets="Publish">
    <ItemGroup>
      <SdksToBundle Include="$(RepoRoot)/build/RestoreDependency.proj">
        <Properties>
          CLIBuildDll=$(CLIBuildDll);
          NuGetPackagesDir=$(NuGetPackagesDir);
          SdkLayoutDirectory=$(PublishDir)/Sdks/%(BundledSdk.Identity);
          DependencyPackageName=%(BundledSdk.Identity);
          DependencyPackageVersion=%(BundledSdk.Version);
          PreviousStageDirectory=$(PreviousStageDirectory)
        </Properties>
      </SdksToBundle>
    </ItemGroup>

    <MSBuild
      BuildInParallel="False"
      Projects="@(SdksToBundle)">
    </MSBuild>
  </Target>

  <Target Name="ChmodPublishDir"
          AfterTargets="PublishMSBuildExtensions"
          Condition=" '$(OSName)' != 'win' ">
    
    <Exec Command="find $(PublishDir) -type d -exec chmod 755 {} \;" />
    <Exec Command="find $(PublishDir) -type f -exec chmod 644 {} \;" />
  </Target>

  <Target Name="CreateSymbolsDirectory"
          AfterTargets="PublishMSBuildExtensions">
    <ItemGroup>
      <_AllSdkFiles Include="$(PublishDir)/**/*" />
    </ItemGroup>

    <Copy SourceFiles="@(_AllSdkFiles)"
        DestinationFiles="@(_AllSdkFiles->'$(SymbolsDirectory)/sdk/%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="RemovePdbsFromPublishDir"
          AfterTargets="CreateSymbolsDirectory">
    <ItemGroup>
      <PdbsToClean Include="$(PublishDir)/**/*.pdb" />
    </ItemGroup>

    <Delete Files="@(PdbsToClean)" />
  </Target>
</Project>
