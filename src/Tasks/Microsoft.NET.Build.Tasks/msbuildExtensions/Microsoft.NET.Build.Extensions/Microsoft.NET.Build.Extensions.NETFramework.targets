<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- Add NETStandard references if targetframeworkversion supports netstandard2.0 (net461 or later) -->
    <ImplicitlyExpandNETStandardFacades Condition="'$(ImplicitlyExpandNETStandardFacades)' == '' AND '$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.1'">true</ImplicitlyExpandNETStandardFacades>
  </PropertyGroup>

  <Choose>
    <!-- Allow completely disabling the conflict resolution targets-->
    <When Condition="'$(ImplicitlyExpandNETStandardFacades)' != 'true'" />
    <When Condition="'$(UsingMicrosoftNETSdk)' == 'true'">
      <!-- .NET SDK: Run after references are resolved -->
      <PropertyGroup>
        <ImplicitlyExpandNETStandardFacadesAfter>ResolveLockFileReferences</ImplicitlyExpandNETStandardFacadesAfter>
      </PropertyGroup>
    </When>
    <When Condition="'$(ResolveNuGetPackages)' == 'true' and Exists('$(ProjectLockFile)')">
      <!-- Non-SDK using project.json or PackageReference, run after references are read from the lock/assets file -->
      <PropertyGroup>
        <ImplicitlyExpandNETStandardFacadesAfter>ResolveNuGetPackageAssets</ImplicitlyExpandNETStandardFacadesAfter>
      </PropertyGroup>
    </When>
    <Otherwise>
      <!-- No specific NuGet targets to sequence after, run before targets that consume references -->
      <PropertyGroup>
        <ResolveAssemblyReferencesDependsOn>ImplicitlyExpandNETStandardFacades;$(ResolveAssemblyReferencesDependsOn)</ResolveAssemblyReferencesDependsOn>
        <PrepareResourcesDependsOn>ImplicitlyExpandNETStandardFacades;$(PrepareResourcesDependsOn)</PrepareResourcesDependsOn>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <PropertyGroup Condition="'$(ImplicitlyExpandNETStandardFacades)' == 'true'">
    <!-- Ensure this runs before conflict resolution since the added files may cause conflicts -->
    <HandlePackageFileConflictsDependsOn>ImplicitlyExpandNETStandardFacades;$(HandlePackageFileConflictsDependsOn)</HandlePackageFileConflictsDependsOn>
  </PropertyGroup>

  <UsingTask TaskName="GetDependsOnNETStandard" AssemblyFile="$(MicrosoftNETBuildExtensionsTasksAssembly)" />
  <Target Name="ImplicitlyExpandNETStandardFacades"
          AfterTargets="$(ImplicitlyExpandNETStandardFacadesAfter)">

    <ItemGroup>
      <_candidateNETStandardReferences Include="@(Reference);@(_ResolvedProjectReferencePaths)" />
      <_inboxNETStandardFolders Include="$(TargetFrameworkDirectory)" />
    </ItemGroup>

    <!-- determine if NETStandard.dll is supported inbox for this TargetFramework -->
    <PropertyGroup Condition="'$(NETStandardInbox)' == ''">
      <NETStandardInbox Condition="Exists('%(_inboxNETStandardFolders.Identity)\netstandard.dll')">true</NETStandardInbox>
    </PropertyGroup>

    <!-- determine if any references depend on NETStandard -->
    <GetDependsOnNETStandard Condition="'$(DependsOnNETStandard)' == '' AND '$(NETStandardInbox)' != 'true' AND '@(_candidateNETStandardReferences)' != ''" 
                             References="@(_candidateNETStandardReferences)">
      <Output TaskParameter="DependsOnNETStandard" PropertyName="DependsOnNETStandard" />
    </GetDependsOnNETStandard>

    <!-- if any reference depends on netstandard and it is not inbox, add references and implementation assemblies for netstandard2.0  -->
    <ItemGroup Condition="'$(DependsOnNETStandard)' == 'true' AND '$(NETStandardInbox)' != 'true'">
      <_NETStandardLibraryNETFrameworkReference Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.7'"
                                                Include="$(MSBuildThisFileDirectory)\net47\ref\*.dll" />
      <_NETStandardLibraryNETFrameworkReference Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.2'"
                                                Include="$(MSBuildThisFileDirectory)\net462\ref\*.dll"
                                                Exclude="@(_NETStandardLibraryNETFrameworkReference->'$(MSBuildThisFileDirectory)\net462\ref\%(FileName).dll'" />
      <_NETStandardLibraryNETFrameworkReference Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.1'"
                                                Include="$(MSBuildThisFileDirectory)\net461\ref\*.dll"
                                                Exclude="@(_NETStandardLibraryNETFrameworkReference->'$(MSBuildThisFileDirectory)\net461\ref\%(FileName).dll'" />

      <_NETStandardLibraryNETFrameworkLib Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.7'"
                                          Include="$(MSBuildThisFileDirectory)\net47\lib\*.dll" />
      <_NETStandardLibraryNETFrameworkLib Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.2'"
                                          Include="$(MSBuildThisFileDirectory)\net462\lib\*.dll"
                                          Exclude="@(_NETStandardLibraryNETFrameworkLib->'$(MSBuildThisFileDirectory)\net462\lib\%(FileName).dll'" />
      <_NETStandardLibraryNETFrameworkLib Condition="'$(_TargetFrameworkVersionWithoutV)' &gt;= '4.6.1'"
                                          Include="$(MSBuildThisFileDirectory)\net461\lib\*.dll"
                                          Exclude="@(_NETStandardLibraryNETFrameworkLib->'$(MSBuildThisFileDirectory)\net461\lib\%(FileName).dll'" />

      <!-- Remove simple name references if we're directly providing a reference assembly to the compiler. For example,
           consider a project with a Reference Include="System.Net.Http" or "System.IO.Compression", which are both in 
           _NETStandardLibraryNETFrameworkReference.
           Simple references can also come from NuGet framework assemblies, hence this statement should occur after
           including all computed references, thus this target is scheduled after references have been raised by NuGet
           targets. -->
      <Reference Remove="%(_NETStandardLibraryNETFrameworkReference.FileName)" />

      <Reference Include="@(_NETStandardLibraryNETFrameworkReference)">
        <Private>false</Private>
      </Reference>

      <ReferenceCopyLocalPaths Include="@(_NETStandardLibraryNETFrameworkLib)">
        <Private>false</Private>
      </ReferenceCopyLocalPaths>
    </ItemGroup>
  </Target>
</Project>
