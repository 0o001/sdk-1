<!--
***********************************************************************************************
Microsoft.NET.ComposeCache.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
                                        ComposeCache
 
    The main cache entry point.
    ============================================================
    -->
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Target Name="ComposeCache"
          DependsOnTargets="PrepareForComposeCache;
                            PrepOptimizer;
                            CacheWorkerMain;
                            _CopyResolvedUnOptimizedFiles;
                            CacheFinalizer;"/>

  <!--
    ============================================================
                                        CacheWorkerMain

   Processes the cache project files
    ============================================================
    -->
  
  <Target Name="CacheWorkerMain">
    
    <ItemGroup>
      <_AllProjects Include="$(AdditionalProjects.Split('%3B'))"/>
      <_AllProjects Include ="$(MSBuildProjectFullPath)"/>
    </ItemGroup>

    <MSBuild Projects="%(_AllProjects.Identity)"
                 Targets="CacheWorkerMapper"
                 BuildinParallel="$(BuildinParallel)"
                 Properties="ComposeWorkingDir=$(ComposeWorkingDir);
                             PublishDir=$(PublishDir);
                             CacheStagingDir=$(CacheStagingDir);
                             TargetFramework=$(_TFM);
                             JitPath=$(JitPath);
                             Crossgen=$(Crossgen);
                             RestoreProj=$(RestoreProj);
                             DisableImplicitFrameworkReferences=true;
                             SkipUnchangedFiles=$(SkipUnchangedFiles);
                             PreserveCacheLayout=$(PreserveCacheLayout)"
                 ContinueOnError="WarnAndContinue">
      <Output ItemName="AllResolvedPackagesPublished" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>
  <!--
    ============================================================
                                        CacheWorkerMapper

   Processes each package specified in a cache project file
    ============================================================
    -->

  <Target Name="CacheWorkerMapper"
          Returns ="@(ResolvedPackagesFromMapper)">

    <ItemGroup>
      <PackageReferencesToCache Include="$(RestoreProj)">
        <Properties>
          CachePackageName=%(PackageReference.Identity);
          CachePackageVersion=%(PackageReference.Version);
          ComposeWorkingDir=$(ComposeWorkingDir);
          PublishDir=$(PublishDir);
          CacheStagingDir=$(CacheStagingDir);
          TargetFramework=$(TargetFramework);
          JitPath=$(JitPath);
          Crossgen=$(Crossgen);
          SkipUnchangedFiles=$(SkipUnchangedFiles);
          PreserveCacheLayout=$(PreserveCacheLayout)
        </Properties>
      </PackageReferencesToCache>
    </ItemGroup>

    <MSBuild Projects="@(PackageReferencesToCache)"
                 Targets="CacheWorker"
                 BuildInParallel="$(BuildInParallel)"
                 ContinueOnError="WarnAndContinue">
      <Output ItemName="ResolvedPackagesFromMapper" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <Target Name="CacheWorker"
          Returns="@(ResolvedPackagesPublished)"
          DependsOnTargets="PrepforRestoreForComposeCache;
                            CacheWorkerPerformWork"/>
  
  <Target Name="CacheWorkerPerformWork"
          DependsOnTargets="RestoreForComposeCache;
                            ComputeAndCopyFilesToCacheDirectory;"
          Condition="!Exists($(CacheWorkerWorkingDir))" />

<!--
    ============================================================
                                        CacheFinalizer

   Cleans up and produces artifacts after completion of cache
    ============================================================
    -->
  <UsingTask TaskName="RemoveDuplicatePackageReferences" AssemblyFile="$(MicrosoftNETBuildTasksAssembly)" />
  <Target Name="CacheFinalizer"
          DependsOnTargets="CacheWorkerMain;
                            _CopyResolvedOptimizedFiles">

    <RemoveDuplicatePackageReferences
         InputPackageRefernces="@(AllResolvedPackagesPublished)">
      <Output TaskParameter="UniquePackageRefernces"  ItemName="AllResolvedPackagesPublishedAfterFilter"/>
    </RemoveDuplicatePackageReferences>
    
    <ItemGroup>
      <ListOfPackageReference Include="@(AllResolvedPackagesPublishedAfterFilter -> '%20%20%20&lt;Package Id=&quot;%(Identity)&quot;  Version =&quot;%(Version)&quot;/&gt;')"/>
    </ItemGroup>
    <PropertyGroup>
     <_CacheArtifactContent>
      <![CDATA[
<CacheArtifacts>
@(ListOfPackageReference)
</CacheArtifacts>
]]>
       </_CacheArtifactContent>
      </PropertyGroup>
    <WriteLinesToFile
             File="$(CacheArtifactXml)"
             Lines="$(_CacheArtifactContent)"
             Overwrite="true" />

    <Message Text="Files were composed in $(PublishDir)"
                 Importance="high"/>
    <Message Text="The list of packages cached is in $(CacheArtifactXml) "
                 Importance="high"/>
    <RemoveDir
        Condition="'$(PreserveComposeWorkingDir)' != 'true'"
        Directories="$(ComposeWorkingDir)"
        ContinueOnError="WarnAndContinue"/>
  </Target>

  <!--
    ============================================================
                                        _CopyResolvedUnOptimizedFiles

    Copy OptimizedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->

  <Target Name="_CopyResolvedOptimizedFiles"
          DependsOnTargets="CacheWorkerMain;">
    <ItemGroup>
      <_OptimizedResolvedFileToPublish Include="$(CacheStagingDir)\**\*.*" />
    </ItemGroup>

    <Copy SourceFiles = "@(_OptimizedResolvedFileToPublish)"
          DestinationFolder="$(PublishDir)%(RecursiveDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          Condition ="'@(_OptimizedResolvedFileToPublish)' != ''"
          SkipUnchangedFiles="$(SkipUnchangedFiles)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>
  </Target>
  
  <!--
    ============================================================
                                        PrepareForComposeCache

    Prepare the prerequisites for ComposeCache.
    ============================================================
    -->
  
  <Target Name="PrepareForComposeCache">

    <PropertyGroup>
      <PreserveCacheLayout Condition="'$(PreserveCacheLayout)' == ''">true</PreserveCacheLayout>
      <SkipOptimization Condition="'$(RuntimeIdentifier)' == ''">true</SkipOptimization>
      <_TFM Condition="'$(_TFM)' == ''">$(TargetFramework)</_TFM>
      <SkipUnchangedFiles Condition="'$(SkipUnchangedFiles)' == ''">true</SkipUnchangedFiles>
    </PropertyGroup>

    <NETSdkError Condition="'$(RuntimeIdentifier)' =='' and '$(_PureManagedAssets)' == ''"
                 ResourceName="RuntimeIdentifierWasNotSpecified"/>

    <NETSdkError Condition="'$(_TFM)' ==''"
                 ResourceName="AtLeastOneTargetFrameworkMustBeSpecified"/>
      
    <PropertyGroup>
      <DefaultComposeDir>$(HOME)</DefaultComposeDir>
      <DefaultComposeDir Condition="'$(OS)' == 'Windows_NT'">$(USERPROFILE)</DefaultComposeDir>
      <DefaultComposeDir>$([System.IO.Path]::Combine($(DefaultComposeDir), '.dotnet', $(PlatformTarget), 'packages'))</DefaultComposeDir>
      <ComposeDir Condition="'$(ComposeDir)' != '' and '$(DoNotDecorateComposeDir)' != 'true'">$([System.IO.Path]::Combine($(ComposeDir), $(PlatformTarget)))</ComposeDir>
      <ComposeDir Condition="'$(ComposeDir)' == ''">$(DefaultComposeDir)</ComposeDir>
      <ComposeDir Condition="'$(DoNotDecorateComposeDir)' != 'true'">$([System.IO.Path]::Combine($(ComposeDir), $(_TFM)))</ComposeDir>
      <CacheArtifactXml>$([System.IO.Path]::Combine($(ComposeDir),"artifact.xml"))</CacheArtifactXml>
      <PublishDir>$([System.IO.Path]::GetFullPath($(ComposeDir)))</PublishDir>
      <_RandomFileName>$([System.IO.Path]::GetRandomFileName())</_RandomFileName>
      <TEMP Condition="'$(TEMP)' == ''">$([System.IO.Path]::GetTempPath())</TEMP>
      <ComposeWorkingDir Condition="'$(ComposeWorkingDir)' == ''">$([System.IO.Path]::Combine($(TEMP), $(_RandomFileName)))</ComposeWorkingDir>
      <ComposeWorkingDir>$([System.IO.Path]::GetFullPath($(ComposeWorkingDir)))</ComposeWorkingDir>
      <CacheStagingDir>$([System.IO.Path]::Combine($(ComposeWorkingDir),"StagingDir"))</CacheStagingDir>      <!-- Will contain  optimized managed assemblies in nuget cache layout -->
      <RestoreProj>$([System.IO.Path]::Combine($(ComposeWorkingDir),"Restore.csproj"))</RestoreProj>          <!-- To minimize parsing huge input files during restore stage for packages -->
      <!-- Ensure any PublishDir has a trailing slash, so it can be concatenated -->
      <PublishDir Condition="!HasTrailingSlash('$(PublishDir)')">$(PublishDir)\</PublishDir>
    </PropertyGroup>


    <NETSdkError Condition="Exists($(ComposeWorkingDir))"
                 ResourceName="FolderAlreadyExists"
                 FormatArguments="$(ComposeWorkingDir)" />

    <MakeDir Directories="$(PublishDir)" />
    <MakeDir  Directories="$(CacheStagingDir)"/>

    <!-- Create a Project to be used for restores-->
    <PropertyGroup>
      <RestoreProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">
</Project>

]]>
      </RestoreProjContent>
    </PropertyGroup>

    <WriteLinesToFile
        File="$(RestoreProj)"
        Lines="$(RestoreProjContent)"
        Overwrite="true" />
  </Target>

  <Target Name="PrepforRestoreForComposeCache">

    <PropertyGroup>
      <CachePackageVersion>$(CachePackageVersion.Replace('*','-'))</CachePackageVersion>
      <CacheWorkerWorkingDir>$([System.IO.Path]::Combine($(ComposeWorkingDir),"$(CachePackageName)_$(CachePackageVersion)"))</CacheWorkerWorkingDir>
      <_PackageProjFile>$([System.IO.Path]::Combine($(CacheWorkerWorkingDir), "Package.csproj"))</_PackageProjFile>
      <ProjectAssetsFile>$(CacheWorkerWorkingDir)\project.assets.json</ProjectAssetsFile>
      <_PackageProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk">
  <ItemGroup>
    <PackageReference Include="$(CachePackageName)"  Version ="$(CachePackageVersion)"/>
  </ItemGroup>
</Project>    
]]>
      </_PackageProjContent>
    </PropertyGroup>
    
  </Target>
  
  <!--
    ============================================================
                                        RestoreForComposeCache

    Restores the package
    ============================================================
    -->
  
  <Target Name="RestoreForComposeCache"
          DependsOnTargets="PrepforRestoreForComposeCache;">
    
    <MakeDir Directories="$(CacheWorkerWorkingDir)" />
    
    <!-- Create a Project to Restore Package -->
    <WriteLinesToFile
            File="$(_PackageProjFile)"
            Lines="$(_PackageProjContent)"
            Overwrite="true" />
    
    <MSBuild Projects="$(_PackageProjFile)"
                 Targets="Restore"
                 Properties="RestoreGraphProjectInput=$(_PackageProjFile);
                             DisableImplicitFrameworkReferences=true;
                             RestoreOutputPath=$(CacheWorkerWorkingDir);
                             TargetFramework=$(TargetFramework);"/>
  </Target>

  <!--
    ============================================================
                                        ComputeAndCopyFilesToCacheDirectory

    Computes the list of all files to copy to the publish directory and then publishes them.
    ============================================================
    -->
  
  <Target Name="ComputeAndCopyFilesToCacheDirectory"
          DependsOnTargets="ComputeFilesToCache;
                            CopyFilesToCacheDirectory" />

  <!--
    ============================================================
                                        CopyFilesToCacheDirectory

    Copy all build outputs, satellites and other necessary files to the publish directory.
    ============================================================
    -->
  
  <Target Name="CopyFilesToCacheDirectory"
          DependsOnTargets="_CopyResolvedUnOptimizedFiles"/>
  
  
  <!--
    ============================================================
                                        _CopyResolvedUnOptimizedFiles

    Copy _UnOptimizedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->
  
  <Target Name="_CopyResolvedUnOptimizedFiles"
          DependsOnTargets="_ComputeResolvedFilesToCacheTypes;
                            _RunOptimizer">

    <Copy SourceFiles = "@(_UnOptimizedResolvedFileToPublish)"
          DestinationFiles="$(PublishDir)%(_UnOptimizedResolvedFileToPublish.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          SkipUnchangedFiles="$(SkipUnchangedFiles)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>
  </Target>

  <!--
    ============================================================
                                        _ComputeResolvedFilesToCacheTypes
    ============================================================
    -->
  
  <Target Name="_ComputeResolvedFilesToCacheTypes"
           DependsOnTargets="_GetResolvedFilesToCache;_SplitResolvedFiles;" />

  <!--
    ============================================================
                                        _SplitResolvedFiles

    Splits ResolvedFileToPublish items into 'managed' and 'unmanaged' buckets.
    ============================================================
    -->
  
  <Target Name="_SplitResolvedFiles"
           Condition="$(SkipOptimization) !='true' "
           DependsOnTargets="_GetResolvedFilesToCache">
    <ItemGroup>
      <_ManagedResolvedFileToPublishCandidates Include="@(ResolvedFileToPublish)"
                                             Condition="'%(ResolvedFileToPublish.AssetType)'=='runtime'" />

      <_UnOptimizedResolvedFileToPublish Include="@(ResolvedFileToPublish)"
                                     Condition="'%(ResolvedFileToPublish.AssetType)'!='runtime'" />
    </ItemGroup>

    <PropertyGroup>
      <SkipOptimization Condition="'@(_ManagedResolvedFileToPublishCandidates)'==''">true</SkipOptimization>
    </PropertyGroup>
  </Target>

  <!--
    ============================================================
                                        _GetResolvedFilesToCache
    ============================================================
    -->
  
  <Target Name="_GetResolvedFilesToCache"
           Condition="$(SkipOptimization) == 'true' ">
    <ItemGroup>
            <_UnOptimizedResolvedFileToPublish Include="@(ResolvedFileToPublish)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        ComputeFilesToCache

    Gathers all the files that need to be copied to the publish directory.
    ============================================================
    -->
  
  <Target Name="ComputeFilesToCache"
          DependsOnTargets="_ComputeNetPublishAssets;
                            _ComputeCopyToPublishDirectoryItems">

    <PropertyGroup>
      <CopyBuildOutputToPublishDirectory Condition="'$(CopyBuildOutputToPublishDirectory)'==''">true</CopyBuildOutputToPublishDirectory>
      <CopyOutputSymbolsToPublishDirectory Condition="'$(CopyOutputSymbolsToPublishDirectory)'==''">true</CopyOutputSymbolsToPublishDirectory>
    </PropertyGroup>

    <ItemGroup>

      <!-- Copy all the assemblies -->
      <ResolvedFileToPublish Include="@(ResolvedAssembliesToPublish)">
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
