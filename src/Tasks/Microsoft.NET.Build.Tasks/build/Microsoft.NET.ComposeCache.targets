<!--
***********************************************************************************************
Microsoft.NET.ComposeCache.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
                                        ComposeCache
 
    The main cache entry point.
    ============================================================
    -->
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <Target Name="ComposeCache"
          DependsOnTargets="PrepareForComposeCache;
                            RestoreForComposeCache;
                            ComputeAndCopyFilesToCacheDirectory"/>
  

  <!--
    ============================================================
                                        PrepareForComposeCache

    Prepare the prerequisites for ComposeCache.
    ============================================================
    -->
  <Target Name="PrepareForComposeCache">

    <PropertyGroup>
      <PreserveCacheLayout Condition="'$(PreserveCacheLayout)' == ''">true</PreserveCacheLayout>
      <SkipOptimization Condition="'$(RuntimeIdentifier)' == ''">true</SkipOptimization>
      <_TFM Condition="'$(_TFM)' == ''">$(TargetFramework)</_TFM>
      <FX_Version Condition="'$(FX_Version)' == ''">$(_ShortFrameworkVersion)</FX_Version>
      <PathSeparator>$([System.IO.Path]::PathSeparator)</PathSeparator>
    </PropertyGroup>

    <NETSdkError Condition="'$(RuntimeIdentifier)' =='' and '$(_PureManagedAssets)' == ''"
    ResourceName="RuntimeIdentifierMustBeSetForNETFramework"/>

    <NETSdkError Condition="'$(_TFM)' ==''"
    ResourceName="AtLeastOneTargetFrameworkMustBeSpecified"/>
      
    <PropertyGroup>
      <DefaultComposeDir>$(HOME)</DefaultComposeDir>
      <DefaultComposeDir Condition="$(OS.ToUpper().Contains('WINDOWS'))">$(USERPROFILE)</DefaultComposeDir>
      <DefaultComposeDir>$([System.IO.Path]::Combine($(DefaultComposeDir), '.dotnet', $(PlatformTarget), 'packages'))</DefaultComposeDir>
      <ComposeDir Condition="'$(ComposeDir)' != '' and '$(DoNotDecorateComposeDir)' == ''">$([System.IO.Path]::Combine($(ComposeDir), $(PlatformTarget)))</ComposeDir>
      <ComposeDir Condition="'$(ComposeDir)' == ''">$(DefaultComposeDir)</ComposeDir>
      <ComposeDir Condition="'$(DoNotDecorateComposeDir)' == ''">$([System.IO.Path]::Combine($(ComposeDir), $(_TFM)))</ComposeDir>
      <PublishDir>$([System.IO.Path]::GetFullPath($(ComposeDir)))</PublishDir>
      <_CrossProjFileDir>$([System.IO.Path]::Combine($(MSBuildProjectExtensionsPath),"Optimize"))</_CrossProjFileDir>
      <!-- Ensure any PublishDir has a trailing slash, so it can be concatenated -->
      <PublishDir Condition="!HasTrailingSlash('$(PublishDir)')">$(PublishDir)\</PublishDir>
    </PropertyGroup>


    <RemoveDir
        Condition="Exists($(_CrossProjFileDir))"
        Directories="$(_CrossProjFileDir)" />

    <MakeDir Directories="$(PublishDir)" />

  </Target>
  
  <!--
    ============================================================
                                        RestoreForComposeCache

    Preps the Restore Task.
    ============================================================
    -->
  <Target Name="RestoreForComposeCache">

    <MSBuild Projects="$(MSBuildProjectFullPath)"
                 Targets="Restore"
                 Properties="RestoreGraphProjectInput=$(MSBuildProjectFullPath);
                             DisableImplicitFrameworkReferences=true;
                             TargetFramework=$(_TFM);"/>

  </Target>


  <!--
    ============================================================
                                        ComputeAndCopyFilesToCacheDirectory

    Computes the list of all files to copy to the publish directory and then publishes them.
    ============================================================
    -->
  <Target Name="ComputeAndCopyFilesToCacheDirectory"
          DependsOnTargets="ComputeFilesToCache;
                            CopyFilesToCacheDirectory" />

  <!--
    ============================================================
                                        CopyFilesToCacheDirectory

    Copy all build outputs, satellites and other necessary files to the publish directory.
    ============================================================
    -->
  <Target Name="CopyFilesToCacheDirectory"
          DependsOnTargets="_CopyResolvedManagedFiles;
                            _CopyResolvedUnOptimizedFiles">

    <Message Text="Files were composed in $(PublishDir)"
             Importance="high"/>
    <RemoveDir
        Condition="'$(PreserveCrossProjFolder)' == ''"
        Directories="$(_CrossProjFileDir)" />
  </Target>

  <!--
    ============================================================
                                        _CopyResolvedManagedFiles

    Copy _ManagedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->
  <Target Name="_CopyResolvedManagedFiles"
          DependsOnTargets="_ComputeResolvedFilesToCacheTypes;
                            _RunOptimizer"
          Inputs="@(_ManagedResolvedFileToPublish)"
          Outputs="@(_ManagedResolvedFileToPublish->'$(PublishDir)%(RecursiveDir)%(Fileame)%(Extension)')">

    <Copy SourceFiles = "@(_ManagedResolvedFileToPublish)"
          DestinationFiles="$(PublishDir)%(RecursiveDir)%(Filename)%(Extension)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--
    ============================================================
                                        _CopyResolvedUnOptimizedFiles

    Copy _UnOptimizedResolvedFileToPublish items to the publish directory.
    ============================================================
    -->
  <Target Name="_CopyResolvedUnOptimizedFiles"
          DependsOnTargets="_ComputeResolvedFilesToCacheTypes">

    <Copy SourceFiles = "@(_UnOptimizedResolvedFileToPublish)"
          DestinationFiles="$(PublishDir)%(_UnOptimizedResolvedFileToPublish.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>

    </Copy>

  </Target>

  <!--
    ============================================================
                                        _ComputeResolvedFilesToCacheTypes
    ============================================================
    -->
  <Target Name="_ComputeResolvedFilesToCacheTypes"
           DependsOnTargets="_GetResolvedFilesToCache;_SplitResolvedFiles;" />

  <!--
    ============================================================
                                        _SplitResolvedFiles

    Splits ResolvedFileToPublish items into 'managed' and 'unmanaged' buckets.
    ============================================================
    -->
  <Target Name="_SplitResolvedFiles"
           Condition="$(SkipOptimization) !='true' "
           DependsOnTargets="_GetResolvedFilesToCache">
    <ItemGroup>
      <_ManagedResolvedFileToPublishCandidates Include="@(ResolvedFileToPublish)"
                                             Condition="'%(ResolvedFileToPublish.AssetType)'=='runtime'" />

      <_UnOptimizedResolvedFileToPublish Include="@(ResolvedFileToPublish)"
                                     Condition="'%(ResolvedFileToPublish.AssetType)'!='runtime'" />
    </ItemGroup>

    <PropertyGroup>
      <SkipOptimization Condition="'@(_ManagedResolvedFileToPublishCandidates)'==''">true</SkipOptimization>
    </PropertyGroup>
    
  </Target>

  <!--
    ============================================================
                                        _GetResolvedFilesToCache

   
    ============================================================
    -->
  <Target Name="_GetResolvedFilesToCache"
           Condition="$(SkipOptimization) == 'true' ">
    <ItemGroup>
            <_UnOptimizedResolvedFileToPublish Include="@(ResolvedFileToPublish)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
                                        ComputeFilesToCache

    Gathers all the files that need to be copied to the publish directory.
    ============================================================
    -->
  <Target Name="ComputeFilesToCache"
          DependsOnTargets="_ComputeNetPublishAssets;
                            _ComputeCopyToPublishDirectoryItems">

    <PropertyGroup>
      <CopyBuildOutputToPublishDirectory Condition="'$(CopyBuildOutputToPublishDirectory)'==''">true</CopyBuildOutputToPublishDirectory>
      <CopyOutputSymbolsToPublishDirectory Condition="'$(CopyOutputSymbolsToPublishDirectory)'==''">true</CopyOutputSymbolsToPublishDirectory>
    </PropertyGroup>

    <ItemGroup>

      <!-- Copy all the assemblies -->
      <ResolvedFileToPublish Include="@(ResolvedAssembliesToPublish)">
      </ResolvedFileToPublish>
    </ItemGroup>

  </Target>

  <!--
    ============================================================
                                        _RunOptimizer

    Start the optimization phase
    ============================================================
    -->
  <Target Name="_RunOptimizer"
          DependsOnTargets="_ComputeResolvedFilesToCacheTypes;
                            _GenerateCrossgenProj;
                            _SetupCrossgenStage;
                            _RestoreCrossgen"
          Condition="$(SkipOptimization) != 'true' ">
    <!-- Get the coreclr path -->
    <ItemGroup>
      <_CoreclrResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='coreclr'" />
      <_CoreclrResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='libcoreclr'" />
      <_JitResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='clrjit'" />
      <_JitResolvedPath Include="@(CrossgenResolvedAssembliesToPublish)"
                                             Condition="'%(CrossgenResolvedAssembliesToPublish.Filename)'=='libclrjit'" />
      <_AssembliestoCrossGen Include="$(_RuntimeDir)\**\*.*" />
    </ItemGroup>

    <NETSdkError Condition="'@(_CoreclrResolvedPath->Count())' &gt; 1"
    ResourceName="MultipleFilesResolved"
    FormatArguments="coreclr" />

    <NETSdkError Condition="'@(_CoreclrResolvedPath)'== ''"
    ResourceName="UnableToFindResolvedPath"
    FormatArguments="coreclr" />

    <NETSdkError Condition="'@(_JitResolvedPath->Count())' &gt; 1"
    ResourceName="MultipleFilesResolved"
    FormatArguments="jit" />

    <NETSdkError Condition="'@(_JitResolvedPath)'== ''"
    ResourceName="UnableToFindResolvedPath"
    FormatArguments="jit" />
    
    
    
    <!-- Get the crossgen and jit path-->
    <PropertyGroup>
      <_CoreclrPath>@(_CoreclrResolvedPath)</_CoreclrPath>
      <_JitPath>@(_JitResolvedPath)</_JitPath>
      <_CoreclrDir>$([System.IO.Path]::GetDirectoryName($(_CoreclrPath)))</_CoreclrDir>
      <_CoreclrPkgDir>$([System.IO.Path]::Combine($(_CoreclrDir),"..\..\..\"))</_CoreclrPkgDir>
      <_CrossgenDir>$([System.IO.Path]::Combine($(_CoreclrPkgDir),"tools"))</_CrossgenDir>
      <!-- TODO override with rid specific tools path for x-arch -->
      <_Crossgen>$([System.IO.Path]::Combine($(_CrossgenDir),"crossgen"))</_Crossgen>
      <_Crossgen Condition="$(OS.ToUpper().Contains('WINDOWS'))">$([System.IO.Path]::Combine($(_CrossgenDir),"crossgen.exe"))</_Crossgen>
    </PropertyGroup>

    <NETSdkError Condition="!Exists($(_Crossgen))"
    ResourceName="UnableToFindResolvedPath"
    FormatArguments="$(_Crossgen)" />

    <PropertyGroup>
      <_Crossgen> $([System.IO.Path]::GetFullPath($(_Crossgen)))</_Crossgen>
    </PropertyGroup>

    <!-- Create the output directory where crossgened assemblies are going to be present -->
    <ItemGroup>
      <_RuntimeOptimizedDirectories Include="@(_AssembliestoCrossGen -> '$(_RuntimeOptimizedDir)\%(RecursiveDir)')"/>
    </ItemGroup>
    <MakeDir  Directories="@(_RuntimeOptimizedDirectories)"/>

    <!-- CrossGen the assemblies  -->
    <Message Text="$(_Crossgen) -readytorun -in %(_AssembliestoCrossGen.Fullpath) -out $([System.IO.Path]::Combine($(_RuntimeOptimizedDir),%(RecursiveDir)%(Filename)%(Extension))) -jitpath $(_JitPath) -platform_assemblies_paths $(_RuntimeRefDir)$(PathSeparator)$(_NetCoreRefDir)"/>
    <Exec
     Command="$(_Crossgen) -readytorun -in %(_AssembliestoCrossGen.Fullpath) -out $([System.IO.Path]::Combine($(_RuntimeOptimizedDir),%(RecursiveDir)%(Filename)%(Extension))) -jitpath $(_JitPath) -platform_assemblies_paths $(_RuntimeRefDir)$(PathSeparator)$(_NetCoreRefDir)">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode"/>
    </Exec>


    <!-- Copy by proxy the directory structure to PublishDir-->
    <ItemGroup>
      <_ManagedResolvedFileToPublish Include="$(_RuntimeOptimizedDir)\**\*.*" />
    </ItemGroup>
  </Target>


  <!--
    ============================================================
                                        _GenerateCrossgenProj
Generates the project used to restore netcoreapp correspoding to FX_Version
    ============================================================
    -->
  <Target Name="_GenerateCrossgenProj">
    <!-- Create a Project to Restore Crossgen -->
    <PropertyGroup>
      <_CrossgenProjContent>
        <![CDATA[
<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="$(MSBuildToolsVersion)">
  <PropertyGroup>
      <TargetFramework>$(_TFM)</TargetFramework>
      <RuntimeIdentifier>$(RuntimeIdentifier)</RuntimeIdentifier>
      <DisableImplicitFrameworkReferences Condition="'$(FX_Version)' != ''">true</DisableImplicitFrameworkReferences>  <!-- Preserve this is as netcoreapp is given by the user -->
  </PropertyGroup>
  <ItemGroup Condition="'$(FX_Version)' != ''">
       <PackageReference Include="Microsoft.NETCore.App" Version="$(FX_Version)" />
  </ItemGroup>

</Project>        

]]>
      </_CrossgenProjContent>
    </PropertyGroup>

    <PropertyGroup>
      <_RuntimeDir>$([System.IO.Path]::Combine($(_CrossProjFileDir),"runtime"))</_RuntimeDir>   <!-- app managed assemblies in nuget cache layout-->
      <_RuntimeRefDir>$([System.IO.Path]::Combine($(_CrossProjFileDir), "runtimeref"))</_RuntimeRefDir> <!-- flat app managed assemblies -->
      <_NetCoreRefDir>$([System.IO.Path]::Combine($(_CrossProjFileDir), "netcoreapp"))</_NetCoreRefDir> <!-- flat netcore app assemblies-->
      <_RuntimeOptimizedDir>$([System.IO.Path]::Combine($(_CrossProjFileDir), "runtimopt"))</_RuntimeOptimizedDir> <!-- optimized app managed assemblies in nuget cache layout -->
      <_CrossProjFile>$([System.IO.Path]::Combine($(_CrossProjFileDir), "Optimize_Crossgen_$(RuntimeIdentifier)_$(_TFM)_$(FX_Version).csproj"))</_CrossProjFile>
      <_CrossProjAssetsFile>$([System.IO.Path]::Combine($(_CrossProjFileDir), "obj", project.assets.json))</_CrossProjAssetsFile>
    </PropertyGroup>

    <MakeDir  Directories="$(_CrossProjFileDir)"/>
    <MakeDir  Directories="$(_RuntimeDir)"/>
    <WriteLinesToFile
        File="$(_CrossProjFile)"
        Lines="$(_CrossgenProjContent)"
        Overwrite="true" />
  </Target>

  <!--
    ============================================================
                                        _SetupCrossgenStage
    ============================================================
    -->
  <Target Name="_SetupCrossgenStage">
    <!-- Copy managed files to temp directory maintaining the structure -->
    <Copy SourceFiles = "@(_ManagedResolvedFileToPublishCandidates)"
          DestinationFiles="$(_RuntimeDir)\%(_ManagedResolvedFileToPublishCandidates.DestinationSubPath)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

    <!-- Copy managed files to  a flat temp directory for passing it as ref -->
    <Copy SourceFiles = "@(_ManagedResolvedFileToPublishCandidates)"
          DestinationFolder="$(_RuntimeRefDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>

  </Target>
  <!--
    ============================================================
                                        _RestoreCrossgen
Restores netcoreapp and publishes it to a temp directory
    ============================================================
    -->
  <Target Name="_RestoreCrossgen">
    <MSBuild Projects="$(_CrossProjFile)"
                 Targets="Restore"
                 Properties="RestoreGraphProjectInput=$(_CrossProjFile);"/>

    <ResolvePublishAssemblies ProjectPath="$(_CrossProjFileDir)"
                              AssetsFilePath="$(_CrossProjAssetsFile)"
                              TargetFramework="$(_TFM)"
                              RuntimeIdentifier="$(RuntimeIdentifier)"
                              PlatformLibraryName="$(MicrosoftNETPlatformLibrary)"
                              PrivateAssetsPackageReferences="@(PrivateAssetsPackageReference)"
                              PreserveCacheLayout="false">

      <Output TaskParameter="AssembliesToPublish" ItemName="CrossgenResolvedAssembliesToPublish" />
    </ResolvePublishAssemblies>

    <!-- Copy managed files to  a flat temp directory for passing it as ref for crossgen -->
    <Copy SourceFiles = "@(CrossgenResolvedAssembliesToPublish)"
          DestinationFolder="$(_NetCoreRefDir)"
          OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
          Retries="$(CopyRetryCount)"
          RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
          UseHardlinksIfPossible="$(CreateHardLinksForPublishFilesIfPossible)"
          UseSymboliclinksIfPossible="$(CreateSymbolicLinksForPublishFilesIfPossible)">

      <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
    </Copy>
  </Target>


</Project>
