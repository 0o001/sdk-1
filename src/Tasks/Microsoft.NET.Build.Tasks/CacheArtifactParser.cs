// Copyright (c) .NET Foundation and contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using System.Globalization;
using System.Xml.Linq;
using NuGet.Versioning;
using NuGet.Packaging.Core;

using Microsoft.Build.Framework;

namespace Microsoft.NET.Build.Tasks
{
    /// <summary>
    /// The following provides the logic to parse the output - artifact.xml.generated by ComposeCache
    /// </summary>
    internal class CacheArtifactParser
    {
        internal static HashSet<PackageIdentity> Parse(string filterFile)
        {
            var listofPackages = new HashSet<PackageIdentity>();
            var doc = XDocument.Load(filterFile);
            var rootName = doc.Root.Name;

            if (!rootName.LocalName.Equals("CacheArtifacts"))
            {
                throw new BuildErrorException(Strings.IncorrectFilterFormat, filterFile);
            }

            var ns = rootName.Namespace;

            foreach (var pkginfo in doc.Root.Elements(ns + "Package"))
            {
                var pkgname = pkginfo.Attribute("Id");
                var version = pkginfo.Attribute("Version");

                if (pkgname != null && version != null)
                {
                    listofPackages.Add(new PackageIdentity(pkgname.Value, NuGetVersion.Parse(version.Value)));
                }
            }

            return listofPackages;
        }
    }

}


