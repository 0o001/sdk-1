<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Project>
  <UsingTask TaskName="Microsoft.DotNet.Compatibility.ValidatePackage" AssemblyFile="$(DotNetCompatibilityAssembly)" />

  <Target Name="RunPackageValidation"
          DependsOnTargets="_GetPackageValidationReferenceDirectories"
          AfterTargets="Pack"
          Condition="'$(IsPackable)' == 'true' and '$(EnablePackageValidation)' == 'true'">

    <PropertyGroup Condition="'$(RoslynAssembliesPath)' == ''">
      <RoslynAssembliesPath>$(RoslynTargetsPath)</RoslynAssembliesPath>
      <_packageReferenceList>@(PackageReference)</_packageReferenceList>
      <RoslynAssembliesPath Condition="'$(MSBuildProjectExtension)' == '.csproj' and $(_packageReferenceList.Contains('Microsoft.Net.Compilers.Toolset'))">$([System.IO.Path]::GetDirectoryName($(CSharpCoreTargetsPath)))</RoslynAssembliesPath>
      <RoslynAssembliesPath Condition="'$(MSBuildProjectExtension)' == '.vbproj' and $(_packageReferenceList.Contains('Microsoft.Net.Compilers.Toolset'))">$([System.IO.Path]::GetDirectoryName($(VisualBasicCoreTargetsPath)))</RoslynAssembliesPath>
      <RoslynAssembliesPath Condition="'$(MSBuildRuntimeType)' == 'Core'">$([System.IO.Path]::Combine('$(RoslynAssembliesPath)', bincore))</RoslynAssembliesPath>
    </PropertyGroup>

    <PropertyGroup>
      <PackageValidationBaselineName Condition="'$(PackageValidationBaselineName)' == ''">$(PackageId)</PackageValidationBaselineName>
      <PackageValidationBaselinePath Condition="'$(PackageValidationBaselinePath)' == '' and '$(PackageValidationBaselineVersion)' != ''">$([MSBuild]::NormalizePath('$(NuGetPackageRoot)', '$(PackageValidationBaselineName.ToLower())', '$(PackageValidationBaselineVersion)', '$(PackageValidationBaselineName.ToLower()).$(PackageValidationBaselineVersion).nupkg'))</PackageValidationBaselinePath>
      <GenerateCompatibilitySuppressionFile Condition="'$(GenerateCompatibilitySuppressionFile)' == ''">false</GenerateCompatibilitySuppressionFile>
      <_compatibilitySuppressionFilePath>$([MSBuild]::NormalizePath('$(MSBuildProjectDirectory)', 'CompatibilitySuppressions.xml'))</_compatibilitySuppressionFilePath>
      <CompatibilitySuppressionFilePath Condition="'$(CompatibilitySuppressionFilePath)' == '' and (Exists($(_compatibilitySuppressionFilePath)) or '$(GenerateCompatibilitySuppressionFile)' == 'true')">$(_compatibilitySuppressionFilePath)</CompatibilitySuppressionFilePath>
    </PropertyGroup>

    <!-- PackageTargetPath isn't exposed by NuGet: https://github.com/NuGet/Home/issues/6671. -->
    <Microsoft.DotNet.Compatibility.ValidatePackage
      PackageTargetPath="$([MSBuild]::ValueOrDefault('$(PackageTargetPath)', '$([MSBuild]::NormalizePath('$(PackageOutputPath)', '$(PackageId).$(PackageVersion).nupkg'))'))"
      RuntimeGraph="$(RuntimeIdentifierGraphPath)"
      NoWarn="$(NoWarn)"
      RunApiCompat="$([MSBuild]::ValueOrDefault('$(RunApiCompat)', 'true'))"
      EnableStrictModeForCompatibleTfms="$([MSBuild]::ValueOrDefault('$(EnableStrictModeForCompatibleTfms)', 'true'))"
      EnableStrictModeForCompatibleFrameworksInPackage="$([MSBuild]::ValueOrDefault('$(EnableStrictModeForCompatibleFrameworksInPackage)', 'false'))"
      GenerateCompatibilitySuppressionFile="$(GenerateCompatibilitySuppressionFile)"
      CompatibilitySuppressionFilePath="$(CompatibilitySuppressionFilePath)"
      BaselinePackageTargetPath="$(PackageValidationBaselinePath)"
      DisablePackageBaselineValidation="$(DisablePackageBaselineValidation)"
      RoslynAssembliesPath="$(RoslynAssembliesPath)"
      ReferenceDirectories="@(PackageValidationReferenceDirectories)" />
  </Target>

  <PropertyGroup>
    <_GetPackageValidationReferenceDirectoriesDependsOn Condition="'$(IsCrossTargetingBuild)' != 'true'">_GetReferenceDirectoriesForPackageValidation</_GetPackageValidationReferenceDirectoriesDependsOn>
    <_GetPackageValidationReferenceDirectoriesDependsOn Condition="'$(IsCrossTargetingBuild)' == 'true'">_ComputeTargetFrameworkItems</_GetPackageValidationReferenceDirectoriesDependsOn>
  </PropertyGroup>

  <Target Name="_GetReferenceDirectoriesForPackageValidation"
          DependsOnTargets="ResolveReferences"
          Returns="@(_ReferenceDirectoriesWithTargetFramework)">
    <ItemGroup>
      <_referenceDirectories Include="@(ReferencePath -> '%(RootDir)%(Directory)')" />
      <_ReferenceDirectoriesWithTargetFramework Include="%(_referenceDirectories.Identity)"  TargetFramework="$(TargetFramework)" />
    </ItemGroup>
  </Target>

  <Target Name="_GetPackageValidationReferenceDirectories"
          DependsOnTargets="$(_GetPackageValidationReferenceDirectoriesDependsOn)"
          Condition="'$(RunPackageValidationWithoutReferences)' != 'true'">

    <MSBuild Projects="@(_InnerBuildProjects)"
             Condition="'$(IsCrossTargetingBuild)' == 'true'"
             Targets="_GetReferenceDirectoriesForPackageValidation"
             Properties="BuildProjectReferences=false">
      <Output ItemName="PackageValidationReferenceDirectories" TaskParameter="TargetOutputs" />
    </MSBuild>

    <ItemGroup Condition="'$(IsCrossTargetingBuild)' != 'true'">
      <PackageValidationReferenceDirectories Include="@(_ReferenceDirectoriesWithTargetFramework)" />
    </ItemGroup>
  </Target>
</Project>
