<!--
***********************************************************************************************
Microsoft.NET.Sdk.BlazorWebAssembly.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="14.0">

  <PropertyGroup>
    <EnableDefaultContentItems Condition=" '$(EnableDefaultContentItems)' == '' ">true</EnableDefaultContentItems>

    <!-- Trimmer defaults that depend on user-definable settings.
        This must be configured before it's initialized in the .NET SDK targets (which are imported by the Razor SDK). -->
    <SuppressTrimAnalysisWarnings Condition="'$(SuppressTrimAnalysisWarnings)' == '' And '$(TrimmerDefaultAction)' != 'link'">true</SuppressTrimAnalysisWarnings>
  </PropertyGroup>

  <Import Sdk="Microsoft.NET.Sdk.Razor" Project="Sdk.targets" />
  <Import Sdk="Microsoft.NET.Sdk.Web.ProjectSystem" Project="Sdk.targets" />
  <Import Sdk="Microsoft.NET.Sdk.Publish" Project="Sdk.targets" />

  <!--
    Targets supporting Razor MSBuild integration. Contain support for generating C# code using Razor
    and including the generated code in the project lifecycle, including compiling, publishing and producing
    nuget packages.
  -->

  <!--
    This is a hook to import a set of targets before the Blazor targets. By default this is unused.
  -->
  <Import Project="$(CustomBeforeBlazorWebAssemblySdkTargets)" Condition="'$(CustomBeforeBlazorWebAssemblySdkTargets)' != '' and Exists('$(CustomBeforeBlazorWebAssemblySdkTargets)')"/>

  <PropertyGroup>
    <!-- Paths to tools, tasks, and extensions are calculated relative to the BlazorWebAssemblySdkDirectoryRoot. This can be modified to test a local build. -->
    <BlazorWebAssemblySdkDirectoryRoot Condition="'$(BlazorWebAssemblySdkDirectoryRoot)'==''">$(MSBuildThisFileDirectory)..\</BlazorWebAssemblySdkDirectoryRoot>
    <_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' == 'Core'">net6.0</_BlazorWebAssemblySdkTasksTFM>
    <_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' != 'Core'">net472</_BlazorWebAssemblySdkTasksTFM>
    <_BlazorWebAssemblySdkTasksAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\$(_BlazorWebAssemblySdkTasksTFM)\Microsoft.NET.Sdk.BlazorWebAssembly.Tasks.dll</_BlazorWebAssemblySdkTasksAssembly>
    <_BlazorWebAssemblySdkToolAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\net6.0\Microsoft.NET.Sdk.BlazorWebAssembly.Tool.dll</_BlazorWebAssemblySdkToolAssembly>
  </PropertyGroup>

  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GenerateBlazorWebAssemblyBootJson" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BlazorWriteSatelliteAssemblyFile" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BlazorReadSatelliteAssemblyFile" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BrotliCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GzipCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.CreateBlazorTrimmerRootDescriptorFile" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />

  <PropertyGroup>
    <SelfContained>true</SelfContained>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    <!-- Runtime feature defaults to trim unnecessary code -->
    <InvariantGlobalization Condition="'$(InvariantGlobalization)' == ''">false</InvariantGlobalization>
    <EventSourceSupport Condition="'$(EventSourceSupport)' == ''">false</EventSourceSupport>
    <UseSystemResourceKeys Condition="'$(UseSystemResourceKeys)' == ''">true</UseSystemResourceKeys>
    <EnableUnsafeUTF7Encoding Condition="'$(EnableUnsafeUTF7Encoding)' == ''">false</EnableUnsafeUTF7Encoding>
    <HttpActivityPropagationSupport Condition="'$(HttpActivityPropagationSupport)' == ''">false</HttpActivityPropagationSupport>
    <DebuggerSupport Condition="'$(DebuggerSupport)' == '' and '$(Configuration)' != 'Debug'">false</DebuggerSupport>
    <BlazorCacheBootResources Condition="'$(BlazorCacheBootResources)' == ''">true</BlazorCacheBootResources>

    <!-- Turn off parts of the build that do not apply to WASM projects -->
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <GenerateRuntimeConfigurationFiles>false</GenerateRuntimeConfigurationFiles>
    <PreserveCompilationContext>false</PreserveCompilationContext>
    <PreserveCompilationReferences>false</PreserveCompilationReferences>
    <IsWebConfigTransformDisabled>true</IsWebConfigTransformDisabled>

    <!-- Don't generate a NETSDK1151 error if a non self-contained Exe references a Blazor Exe -->
    <ShouldBeValidatedAsExecutableReference>false</ShouldBeValidatedAsExecutableReference>

    <!-- Internal properties -->
    <_BlazorOutputPath>wwwroot\_framework\</_BlazorOutputPath>

    <_TargetingNET60OrLater Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND $([MSBuild]::VersionGreaterThanOrEquals('$(TargetFrameworkVersion)', '6.0'))">true</_TargetingNET60OrLater>
  </PropertyGroup>

  <ItemGroup>
    <!-- Configuration for the platform compatibility analyzer. See https://github.com/dotnet/designs/blob/main/accepted/2020/platform-exclusion/platform-exclusion.md#build-configuration-for-platforms -->
    <SupportedPlatform Remove="@(SupportedPlatform)" />
    <SupportedPlatform Include="browser" />
  </ItemGroup>

  <!-- Wire-up static web assets -->
  <PropertyGroup>
    <ResolveStaticWebAssetsInputsDependsOn>
      $(ResolveStaticWebAssetsInputsDependsOn);
      _AddBlazorWasmStaticWebAssets;
    </ResolveStaticWebAssetsInputsDependsOn>

    <ResolvePublishStaticWebAssetsDependsOn>
      $(ResolvePublishStaticWebAssetsDependsOn);
      _GeneratePublishBlazorBootJson
    </ResolvePublishStaticWebAssetsDependsOn>

  </PropertyGroup>

  <!-- <Import Project="Microsoft.NET.Sdk.BlazorWebAssembly.ServiceWorkerAssetsManifest.targets" Condition="'$(ServiceWorkerAssetsManifest)' != ''" /> -->
  <Import Project="Microsoft.NET.Sdk.BlazorWebAssembly.ServiceWorkerAssetsManifest2.targets" Condition="'$(ServiceWorkerAssetsManifest)' != ''" />

  <Target Name="_ScrambleDotnetJsFileName" AfterTargets="ResolveRuntimePackAssets">
    <!--
      We want the dotnet.js file output to have a version to better work with caching. We'll append the runtime version to the file name as soon as file has been discovered.
    -->
    <PropertyGroup>
      <_DotNetJsVersion>$(BundledNETCoreAppPackageVersion)</_DotNetJsVersion>
      <_DotNetJsVersion Condition="'$(RuntimeFrameworkVersion)' != ''">$(RuntimeFrameworkVersion)</_DotNetJsVersion>
      <_BlazorDotnetJsFileName>dotnet.$(_DotNetJsVersion).js</_BlazorDotnetJsFileName>
      <_BlazorDotNetJsFilePath>$(IntermediateOutputPath)$(_BlazorDotnetJsFileName)</_BlazorDotNetJsFilePath>
    </PropertyGroup>

    <ItemGroup>
      <_DotNetJsItem Include="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.DestinationSubPath)' == 'dotnet.js' AND '%(ReferenceCopyLocalPaths.AssetType)' == 'native'">
        <RelativePath>_framework\$(_BlazorDotnetJsFileName)</RelativePath>
      </_DotNetJsItem>
    </ItemGroup>


    <DefineStaticWebAssets Condition="'@(_DotNetJsItem->Count())' != '0'"
      CandidateAssets="@(_DotNetJsItem)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="PreserveNewest"
      ContentRoot="$(IntermediateOutputPath)\blazor"
      BasePath="$(StaticWebAssetBasePath)"
    >
      <Output TaskParameter="Assets" ItemName="_DotnetJsStaticWebAsset" />
      <Output TaskParameter="CopyCandidates" ItemName="_DotnetJsCopyCandidates" />
    </DefineStaticWebAssets>

    <Copy
      SourceFiles="@(_DotnetJsCopyCandidates)"
      DestinationFiles="@(_DotnetJsCopyCandidates->'%(TargetPath)')"
      SkipUnchangedFiles="true"
      OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)" />

    <ItemGroup Condition="'@(_DotNetJsItem->Count())' != '0'">
      <ReferenceCopyLocalPaths Remove="@(_DotNetJsItem)" />
    </ItemGroup>
  </Target>

  <Target Name="_ResolveBlazorWasmOutputs" DependsOnTargets="ResolveReferences;PrepareResourceNames;ComputeIntermediateSatelliteAssemblies">
    <!--
      Calculates the outputs and the paths for Blazor WASM. This target is invoked frequently and should perform minimal work.
    -->

    <PropertyGroup>
      <_BlazorSatelliteAssemblyCacheFile>$(IntermediateOutputPath)blazor.satelliteasm.props</_BlazorSatelliteAssemblyCacheFile>
      <!-- Workaround for https://github.com/dotnet/sdk/issues/12114-->
      <PublishDir Condition="'$(AppendRuntimeIdentifierToOutputPath)' != 'true' AND '$(PublishDir)' == '$(OutputPath)$(RuntimeIdentifier)\$(PublishDirName)\'">$(OutputPath)$(PublishDirName)\</PublishDir>

      <_BlazorWebAssemblyLoadAllGlobalizationData>$(BlazorWebAssemblyLoadAllGlobalizationData)</_BlazorWebAssemblyLoadAllGlobalizationData>
      <_BlazorWebAssemblyLoadAllGlobalizationData Condition="'$(_BlazorWebAssemblyLoadAllGlobalizationData)' == ''">false</_BlazorWebAssemblyLoadAllGlobalizationData>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorJSFile Include="$(BlazorWebAssemblyJSPath)" />
      <_BlazorJSFile Include="$(BlazorWebAssemblyJSMapPath)" Condition="Exists('$(BlazorWebAssemblyJSMapPath)')" />
      <_BlazorJsFile>
        <RelativePath>_framework/%(Filename)%(Extension)</RelativePath>
      </_BlazorJsFile>

      <!-- A missing blazor.webassembly.js is our packaging error. Produce an error so it's discovered early. -->
      <Error
        Text="Unable to find BlazorWebAssembly JS files. This usually indicates a packaging error."
        Code="RAZORSDK1007"
        Condition="'@(_BlazorJSFile->Count())' == '0'" />

      <_BlazorConfigFileCandidates Include="@(StaticWebAsset)" Condition="'%(SourceType)' == 'Discovered'" />

      <!-- Clear out temporary build artifacts that the runtime packages -->
      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)" Condition="'%(ReferenceCopyLocalPaths.Extension)' == '.a'" />

      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"
        Condition="'$(BlazorEnableTimeZoneSupport)' == 'false' AND '%(ReferenceCopyLocalPaths.FileName)%(ReferenceCopyLocalPaths.Extension)' == 'dotnet.timezones.blat'" />

      <ReferenceCopyLocalPaths Remove="@(ReferenceCopyLocalPaths)"
        Condition="'$(InvariantGlobalization)' == 'true' AND '%(ReferenceCopyLocalPaths.Extension)' == '.dat' AND $([System.String]::Copy('%(ReferenceCopyLocalPaths.FileName)').StartsWith('icudt'))" />

      <!--
        ReferenceCopyLocalPaths includes satellite assemblies from referenced projects but are inexpicably missing
        any metadata that might allow them to be differentiated. We'll explicitly add those
        to _BlazorOutputWithTargetPath so that satellite assemblies from packages, the current project and referenced project
        are all treated the same.
       -->

      <_BlazorCopyLocalPath
        Include="@(ReferenceCopyLocalPaths)"
        Exclude="@(ReferenceSatellitePaths)"/>

      <_BlazorCopyLocalPath Include="@(IntermediateSatelliteAssembliesWithTargetPath)">
        <DestinationSubDirectory>%(IntermediateSatelliteAssembliesWithTargetPath.Culture)\</DestinationSubDirectory>
      </_BlazorCopyLocalPath>

      <_BlazorOutputWithRelativePath Include="
          @(_BlazorCopyLocalPath)">
          <RelativePath>_framework/%(_BlazorCopyLocalPath.DestinationSubPath)</RelativePath>
      </_BlazorOutputWithRelativePath>

      <_BlazorOutputWithRelativePath Include="@(IntermediateAssembly)">
        <RelativePath>_framework/%(FileName)%(Extension)</RelativePath>
      </_BlazorOutputWithRelativePath>  


      <_IntermediateAssemblySymbolBlazorOutputWithRelativePath Include="@(_DebugSymbolsIntermediatePath)">
        <RelativePath>_framework/%(FileName)%(Extension)</RelativePath>
      </_IntermediateAssemblySymbolBlazorOutputWithRelativePath>  

      <_BlazorSatelliteAssemblies Include="@(ReferenceSatellitePaths)">
        <Culture>$([System.String]::Copy('%(ReferenceSatellitePaths.DestinationSubDirectory)').Trim('\').Trim('/'))</Culture>
      </_BlazorSatelliteAssemblies>
      
    </ItemGroup>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorOutputWithRelativePath)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Build"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="runtime"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="Never"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.dll"
    >
      <Output TaskParameter="Assets" ItemName="_DotnetRuntimeStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorOutputWithRelativePath)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Build"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="Never"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.wasm"
    >
    <Output TaskParameter="Assets" ItemName="_WasmRuntimeStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorOutputWithRelativePath)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Build"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="Never"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.blat"
    >
      <Output TaskParameter="Assets" ItemName="_WasmRuntimeTimezoneStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorOutputWithRelativePath)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Build"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="Never"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/icudt*"
    >
      <Output TaskParameter="Assets" ItemName="_WasmRuntimeGlobalizationStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorJSFile)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Build"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="Never"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.js"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorJsStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_IntermediateAssemblySymbolBlazorOutputWithRelativePath)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Build"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="symbols"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="Never"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.pdb"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorJsDebugSymbolsStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorConfigFileCandidates)"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="config"
      RelativePathFilter="appsettings*.json"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorJsConfigStaticWebAsset" />
    </DefineStaticWebAssets>

    <ItemGroup>

      <StaticWebAsset Remove="@(_BlazorJsConfigStaticWebAsset)" />
      <StaticWebAsset Include="@(_BlazorJsConfigStaticWebAsset)" />

      <_BlazorStaticWebAsset Include="@(_BlazorJsDebugSymbolsStaticWebAsset)" />
      <_BlazorStaticWebAsset Include="@(_BlazorJsStaticWebAsset)" />
      <_BlazorStaticWebAsset Include="@(_DotnetRuntimeStaticWebAsset)" />
      <_BlazorStaticWebAsset Include="@(_WasmRuntimeStaticWebAsset)" />
      <_BlazorStaticWebAsset Include="@(_WasmRuntimeTimezoneStaticWebAsset)" />
      <_BlazorStaticWebAsset Include="@(_WasmRuntimeGlobalizationStaticWebAsset)" />
        
      <ReferenceCopyLocalPaths Remove="@(_BlazorStaticWebAsset->'%(OriginalItemSpec)')" />
    </ItemGroup>

    <PropertyGroup>
      <_BlazorBuildGZipCompressDirectory>$(IntermediateOutputPath)build-gz\</_BlazorBuildGZipCompressDirectory>
    </PropertyGroup>

    <!--
      Compress referenced binaries using GZip during build. This skips files such as the project's assemblies
      that change from build to build. Runtime assets contribute to the bulk of the download size. Compressing it
      has the most benefit while avoiding any ongoing costs to the dev inner loop.
    -->
    <ItemGroup>
      <_GzipFileToCompressForBuild Include="
        @(_DotnetRuntimeStaticWebAsset->'%(OriginalItemSpec)');
        @(_WasmRuntimeStaticWebAsset->'%(OriginalItemSpec)');
        @(_WasmRuntimeTimezoneStaticWebAsset->'%(OriginalItemSpec)');
        @(_WasmRuntimeGlobalizationStaticWebAsset->'%(OriginalItemSpec)');
        @(_BlazorJsStaticWebAsset->'%(OriginalItemSpec)')" >
        <RelatedAsset>%(Identity)</RelatedAsset>
        <AssetRole>Alternative</AssetRole>
        <AssetTraitName>Content-Encoding</AssetTraitName>
        <AssetTraitValue>gzip</AssetTraitValue>
      </_GzipFileToCompressForBuild>
    </ItemGroup>

    <GZipCompress
      FilesToCompress="@(_GzipFileToCompressForBuild)"
      OutputDirectory="$(_BlazorBuildGZipCompressDirectory)">

      <Output TaskParameter="CompressedFiles" ItemName="_BlazorBuildGZipCompressedFile" />
      <Output TaskParameter="CompressedFiles" ItemName="FileWrites" />
    </GZipCompress>
    
    <ItemGroup>
      <_BlazorBuildGZipCompressedFile>
        <OriginalItemSpec>%(RelatedAsset)</OriginalItemSpec>
      </_BlazorBuildGZipCompressedFile>

      <_BlazorGzipStaticWebAsset Include="@(_BlazorBuildGZipCompressedFile->'%(FullPath)')" />
    </ItemGroup>

  </Target>

  <Target Name="_BlazorWasmPrepareForRun" DependsOnTargets="_ResolveBlazorWasmOutputs" BeforeTargets="_RazorPrepareForRun">
    <PropertyGroup>
      <_BlazorBuildBootJsonPath>$(IntermediateOutputPath)blazor.boot.json</_BlazorBuildBootJsonPath>
      <_BlazorOutputContent>@(_BlazorOutputWithHash)</_BlazorOutputContent>
      <_BlazorWebAssemblyLoadAllGlobalizationData Condition="'$(BlazorWebAssemblyLoadAllGlobalizationData)' == ''">false</_BlazorWebAssemblyLoadAllGlobalizationData>
    </PropertyGroup>

    <GetFileHash Files="@(_BlazorStaticWebAsset->'%(OriginalItemSpec)')" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_BlazorOutputWithHash" />
    </GetFileHash>

    <Error
      Text="Unable to find %(BlazorWebAssemblyLazyLoad.Identity) to be lazy loaded later. Confirm that project or package references are included and the reference is used in the project."
      Code="BLAZORSDK1001"
      Condition="'@(BlazorWebAssemblyLazyLoad)' != '' And !($([System.String]::Copy('$(_BlazorOutputContent)').Contains('%(BlazorWebAssemblyLazyLoad.Identity)')))" />

    <GenerateBlazorWebAssemblyBootJson
      AssemblyPath="@(IntermediateAssembly)"
      Resources="@(_BlazorOutputWithHash)"
      DebugBuild="true"
      LinkerEnabled="false"
      CacheBootResources="$(BlazorCacheBootResources)"
      OutputPath="$(_BlazorBuildBootJsonPath)"
      ConfigurationFiles="@(_BlazorJsConfigStaticWebAsset)"
      LazyLoadedAssemblies="@(BlazorWebAssemblyLazyLoad)"
      InvariantGlobalization="$(InvariantGlobalization)"
      LoadAllICUData="$(_BlazorWebAssemblyLoadAllGlobalizationData)" />

    <ItemGroup>
      <FileWrites Include="$(OutDir)$(_BlazorOutputPath)blazor.boot.json" />
    </ItemGroup>

  </Target>

  <Target Name="_AddBlazorWasmStaticWebAssets" DependsOnTargets="_BlazorWasmPrepareForRun">
    <ItemGroup>
      <_BlazorAsset Include="$(_BlazorBuildBootJsonPath)" RelativePath="_framework/blazor.boot.json" CopyToPublishDirectory="Never"/>
      <_BlazorAsset Include="@(_BlazorOutputWithHash)" CopyToPublishDirectory="Never" />
    </ItemGroup>

    <ItemGroup>
      <StaticWebAsset Include="@(_BlazorWebAssemblyStaticWebAsset)" RemoveMetadata="OriginalItemSpec" />
      <StaticWebAsset Include="@(_DotnetJsStaticWebAsset)" RemoveMetadata="OriginalItemSpec" />
    </ItemGroup>    

  </Target>

  <!-- Just print a message here, static web assets takes care of all the copying -->
  <Target Name="_BlazorCopyFilesToOutputDirectory" AfterTargets="CopyFilesToOutputDirectory">
    <Message Importance="High" Text="$(MSBuildProjectName) (Blazor output) -&gt; $(TargetDir)wwwroot" Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'" />
  </Target>

  <!--
    This target configures special trimming for Microsoft.Extensions.* and Microsoft.AspNetCore.* assemblies.
    We only need this for net5.0 projects since trimmablity is declared using assembly attributes in net6.0 and later.
  -->
  <Target Name="_BlazorWasmPrepareForLink" BeforeTargets="PrepareForILLink" Condition="'$(_TargetingNET60OrLater)' != 'true'">
    <PropertyGroup>
      <_BlazorTypeGranularTrimmerDescriptorFile>$(IntermediateOutputPath)typegranularity.trimmerdescriptor.xml</_BlazorTypeGranularTrimmerDescriptorFile>
    </PropertyGroup>

    <ItemGroup>
      <_BlazorTypeGranularAssembly
          Include="@(ManagedAssemblyToLink)"
          Condition="'%(Extension)' == '.dll' AND $([System.String]::Copy('%(Filename)').StartsWith('Microsoft.AspNetCore.'))">
        <Required>false</Required>
        <Preserve>all</Preserve>
      </_BlazorTypeGranularAssembly>

      <ManagedAssemblyToLink
        IsTrimmable="true"
        Condition="'%(Extension)' == '.dll' AND ($([System.String]::Copy('%(Filename)').StartsWith('Microsoft.AspNetCore.')) or $([System.String]::Copy('%(Filename)').StartsWith('Microsoft.Extensions.')))" />
    </ItemGroup>

    <CreateBlazorTrimmerRootDescriptorFile
      Assemblies="@(_BlazorTypeGranularAssembly)"
      TrimmerFile="$(_BlazorTypeGranularTrimmerDescriptorFile)" />

    <ItemGroup>
      <TrimmerRootDescriptor Include="$(_BlazorTypeGranularTrimmerDescriptorFile)" />

      <FileWrites Include="$(_BlazorTypeGranularTrimmerDescriptorFile)" />
    </ItemGroup>
  </Target>

  <Target Name="_ProcessPublishFilesForBlazor" DependsOnTargets="_ResolveBlazorWasmOutputs" AfterTargets="ILLink">

    <!--
      ResolvedFileToPublish.Culture is missing for satellite assemblies from project references.
      Since we need the culture to correctly generate blazor.boot.json, we cross-reference the culture we calculate as part of _ResolveBlazorWasmOutputs
    -->
    <JoinItems Left="@(ResolvedFileToPublish)"
               Right="@(_BlazorOutputWithTargetPath->HasMetadata('Culture'))"
               LeftMetadata="*"
               RightMetadata="Culture"
               ItemSpecToUse="Left">
      <Output TaskParameter="JoinResult" ItemName="_ResolvedSatelliteToPublish" />
    </JoinItems>

    <PropertyGroup>
      <_BlazorPublishOutputPath Condition="'$(StaticWebAssetBasePath)' != '/'">wwwroot\$(StaticWebAssetBasePath.Replace('/', '\').Trim('\'))\</_BlazorPublishOutputPath>
      <_BlazorPublishOutputPath Condition="'$(StaticWebAssetBasePath)' == '/'">wwwroot\</_BlazorPublishOutputPath>
      <_BlazorFrameworkPublishPath>$(_BlazorPublishOutputPath)_framework\</_BlazorFrameworkPublishPath>
    </PropertyGroup>

    <ItemGroup>
      <ResolvedFileToPublish Remove="@(_ResolvedSatelliteToPublish)" />
      <ResolvedFileToPublish Include="@(_ResolvedSatelliteToPublish)" />

      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.a'" />

      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)"
        Condition="'$(BlazorEnableTimeZoneSupport)' == 'false' AND '%(ResolvedFileToPublish.FileName)%(ResolvedFileToPublish.Extension)' == 'dotnet.timezones.blat'" />

      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)"
        Condition="'$(InvariantGlobalization)' == 'true' AND '%(ResolvedFileToPublish.Extension)' == '.dat' AND $([System.String]::Copy('%(ResolvedFileToPublish.FileName)').StartsWith('icudt'))" />

      <!-- Remove dotnet.js from publish output -->
      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.RelativePath)' == 'dotnet.js'" />

      <!-- Remove pdbs from the publish output -->
      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="'$(CopyOutputSymbolsToPublishDirectory)' != 'true' AND '%(Extension)' == '.pdb'" />

      <_BlazorPublishDlls Include="@(ResolvedFileToPublish)" RemoveMetadata="RelativePath" Condition="'%(Extension)' == '.dll'" TargetPath="wwwroot/_framework/%(RelativePath)" />
      <_BlazorPublishWasmRuntime Include="@(ResolvedFileToPublish)" RemoveMetadata="RelativePath" Condition="'%(Extension)' == '.wasm'" TargetPath="wwwroot/_framework/%(RelativePath)" />
      <_BlazorPublishTimezone Include="@(ResolvedFileToPublish)" RemoveMetadata="RelativePath" Condition="'%(Extension)' == '.blat'" TargetPath="wwwroot/_framework/%(RelativePath)" />
      <_BlazorPublishGlobalization Include="@(ResolvedFileToPublish)" RemoveMetadata="RelativePath" Condition="'%(Extension)' == '.dat'" TargetPath="wwwroot/_framework/%(RelativePath)" />
      <_BlazorPublishDebugSymbols Include="@(ResolvedFileToPublish)"  RemoveMetadata="RelativePath" Condition="'%(Extension)' == '.pdb'" TargetPath="wwwroot/_framework/%(RelativePath)" />

    </ItemGroup>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorPublishDlls)"
      RelativePathPattern="wwwroot/**"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Publish"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="runtime"
      CopyToOutputDirectory="Never"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(PublishDir)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.dll"
    >
      <Output TaskParameter="Assets" ItemName="_DotnetRuntimePublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorPublishWasmRuntime)"
      RelativePathPattern="wwwroot/**"      
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Publish"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="Never"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(PublishDir)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.wasm"
    >
    <Output TaskParameter="Assets" ItemName="_WasmRuntimePublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorPublishTimezone)"
      RelativePathPattern="wwwroot/**"      
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Publish"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="Never"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(PublishDir)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.blat"
    >
      <Output TaskParameter="Assets" ItemName="_WasmRuntimeTimezonePublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorPublishGlobalization)"
      RelativePathPattern="wwwroot/**"      
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Publish"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="Never"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(PublishDir)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/icudt*"
    >
      <Output TaskParameter="Assets" ItemName="_WasmRuntimeGlobalizationPublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(ResolvedFileToPublish)"
      RelativePathPattern="wwwroot/**"      
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Publish"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="native"
      CopyToOutputDirectory="Never"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(PublishDir)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/blazor.webassembly.js"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorJsPublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorPublishDebugSymbols)"
      RelativePathPattern="wwwroot/**"      
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="Publish"
      AssetRole="Primary"
      AssetTraitName="BlazorWebassemblyResource"
      AssetTraitValue="symbols"
      CopyToOutputDirectory="Never"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(PublishDir)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
      RelativePathFilter="**/*.pdb"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorJsDebugSymbolsPublishStaticWebAsset" />
    </DefineStaticWebAssets>

    <ItemGroup>
      <_BlazorPublishAsset Include="@(_DotnetRuntimePublishStaticWebAsset);
        @(_WasmRuntimePublishStaticWebAsset);
        @(_WasmRuntimeTimezonePublishStaticWebAsset);
        @(_WasmRuntimeGlobalizationPublishStaticWebAsset);
        @(_BlazorJsPublishStaticWebAsset);
        @(_BlazorJsDebugSymbolsPublishStaticWebAsset)" />

      <_OtherPublishAssets Include="@(ResolvedFileToPublish)" Exclude="@(_BlazorPublishAsset->'%(OriginalItemSpec)')" />
    </ItemGroup>

    <ItemGroup Condition="'@(ResolvedFileToPublish->AnyHaveMetadataValue('RelativePath', 'web.config'))' != 'true'">
      <ResolvedFileToPublish
         Include="$(MSBuildThisFileDirectory)BlazorWasm.web.config"
         ExcludeFromSingleFile="true"
         CopyToPublishDirectory="PreserveNewest"
         RelativePath="web.config" />
    </ItemGroup>

  </Target>

  <Target Name="_GeneratePublishBlazorBootJson" DependsOnTargets="_ProcessPublishFilesForBlazor">
    <!-- Generate the publish boot json -->
    <ItemGroup>
      <_BlazorPublishBootResource
        Include="@(ResolvedFileToPublish)"
        Condition="$([System.String]::Copy('%(RelativePath)').Replace('\','/').StartsWith($(_BlazorFrameworkPublishPath.Replace('\', '/')))) AND '%(Extension)' != '.a'" />
    </ItemGroup>

    <GetFileHash Files="@(_BlazorPublishBootResource)" Algorithm="SHA256" HashEncoding="base64">
      <Output TaskParameter="Items" ItemName="_BlazorPublishBootResourceWithHash" />
    </GetFileHash>

    <PropertyGroup>
      <_BlazorOutputContent>@(_BlazorPublishBootResourceWithHash)</_BlazorOutputContent>
    </PropertyGroup>

    <Error
      Text="Unable to find %(BlazorWebAssemblyLazyLoad.Identity) to be lazy loaded later. Confirm that project or package references are included and the reference is used in the project."
      Code="BLAZORSDK1001"
      Condition="'@(BlazorWebAssemblyLazyLoad)' != '' And !($([System.String]::Copy('$(_BlazorOutputContent)').Contains('%(BlazorWebAssemblyLazyLoad.Identity)')))" />

    <GenerateBlazorWebAssemblyBootJson
      AssemblyPath="@(IntermediateAssembly)"
      Resources="@(_BlazorPublishBootResourceWithHash)"
      DebugBuild="false"
      LinkerEnabled="$(PublishTrimmed)"
      CacheBootResources="$(BlazorCacheBootResources)"
      OutputPath="$(IntermediateOutputPath)blazor.publish.boot.json"
      ConfigurationFiles="@(_BlazorConfigFile)"
      LazyLoadedAssemblies="@(BlazorWebAssemblyLazyLoad)"
      InvariantGlobalization="$(InvariantGlobalization)"
      LoadAllICUData="$(_BlazorWebAssemblyLoadAllGlobalizationData)" />

    <ItemGroup>
      <ResolvedFileToPublish
        Include="$(IntermediateOutputPath)blazor.publish.boot.json"
        RelativePath="$(_BlazorFrameworkPublishPath)blazor.boot.json" />

      <ResolvedFileToPublish
        Include="@(_BlazorJSFile)"
        RelativePath="$(_BlazorFrameworkPublishPath)%(FileName)%(Extension)" />
    </ItemGroup>
  </Target>

  <Target Name="_BlazorWasmNative"
      DependsOnTargets="_EnsureWasmRuntimeWorkload;_GatherWasmFilesToBuild;WasmBuildApp"
      BeforeTargets="_ProcessPublishFilesForBlazor"
      Condition="'$(UsingBrowserRuntimeWorkload)' == 'true'">

    <!--
      Native compilation produces a copy of the dotnet.js and dotnet.wasm file that are required to run the app. Replace the regular js and wams files with the AOTed version.
      But first, mangle the new dotnet.js file to include the runtime version.
    -->

    <Copy SourceFiles="@(WasmNativeAsset)" DestinationFiles="%(RootDir)%(Directory)\dotnet.$(_DotNetJsVersion).js" Condition="%(FileName) == 'dotnet' AND %(Extension) == '.js'">
      <Output TaskParameter="CopiedFiles" ItemName="_PublishNativeDotnetJsFile" />
    </Copy>

    <ItemGroup>
      <ResolvedFileToPublish Remove="$(_BlazorDotNetJSFilePath)" Condition="'@(WasmNativeAsset->Count())' != '0'"/>
      <ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="(%(FileName) == 'dotnet' AND %(Extension) == '.wasm') AND '@(WasmNativeAsset->Count())' != '0'" />

      <ResolvedFileToPublish Include="@(_PublishNativeDotnetJsFile)" AssetType="native" RelativePath="%(FileName)%(Extension)" />
      <ResolvedFileToPublish Include="@(WasmNativeAsset)" AssetType="native" RelativePath="dotnet.wasm" Condition="%(FileName) == 'dotnet' AND %(Extension) == '.wasm'"/>
    </ItemGroup>
  </Target>

  <Target Name="_EnsureWasmRuntimeWorkload" Condition="'$(UsingBlazorAOTWorkloadManifest)' != 'true'">
    <Error
      Text="Publishing with AOT enabled requires the .NET WebAssembly AOT workload to be installed. To learn more, visit https://aka.ms/AAb4uzl."
      Code="BLAZORSDK1002" />
  </Target>

  <Target Name="_GatherWasmFilesToBuild">
    <ItemGroup>
      <WasmAssembliesToBundle Include="%(ResolvedFileToPublish.FullPath)" Exclude="@(_Exclude)" Condition="%(Extension) == '.dll' AND %(FileName) != 'Microsoft.JSInterop.WebAssembly'" />
    </ItemGroup>
  </Target>

  <Target Name="_BlazorCompressPublishFiles" AfterTargets="_ProcessPublishFilesForBlazor" Condition="'$(BlazorEnableCompression)' != 'false'">
    <PropertyGroup>
      <_CompressedFileOutputPath>$(IntermediateOutputPath)compress\</_CompressedFileOutputPath>
      <_BlazorWebAssemblyBrotliIncremental>true</_BlazorWebAssemblyBrotliIncremental>
    </PropertyGroup>

    <ItemGroup>
      <_FileToCompress
        Include="@(ResolvedFileToPublish)"
        Condition="$([System.String]::Copy('%(ResolvedFileToPublish.RelativePath)').Replace('\','/').StartsWith('wwwroot/'))" />
    </ItemGroup>

    <Message Text="Compressing Blazor WebAssembly publish artifacts. This may take a while..." Importance="High" />

    <MakeDir Directories="$(_CompressedFileOutputPath)" Condition="!Exists('$(_CompressedFileOutputPath)')" />

    <PropertyGroup Condition="'$(DOTNET_HOST_PATH)' == ''">
      <_DotNetHostDirectory>$(NetCoreRoot)</_DotNetHostDirectory>
      <_DotNetHostFileName>dotnet</_DotNetHostFileName>
      <_DotNetHostFileName Condition="'$(OS)' == 'Windows_NT'">dotnet.exe</_DotNetHostFileName>
    </PropertyGroup>

    <BrotliCompress
      OutputDirectory="$(_CompressedFileOutputPath)"
      FilesToCompress="@(_FileToCompress)"
      CompressionLevel="$(_BlazorBrotliCompressionLevel)"
      SkipIfOutputIsNewer="$(_BlazorWebAssemblyBrotliIncremental)"
      ToolAssembly="$(_BlazorWebAssemblySdkToolAssembly)"
      ToolExe="$(_DotNetHostFileName)"
      ToolPath="$(_DotNetHostDirectory)">

      <Output TaskParameter="CompressedFiles" ItemName="_BrotliCompressedFile" />
      <Output TaskParameter="CompressedFiles" ItemName="FileWrites" />
    </BrotliCompress>

    <GZipCompress
      OutputDirectory="$(_CompressedFileOutputPath)"
      FilesToCompress="@(_FileToCompress)">

      <Output TaskParameter="CompressedFiles" ItemName="_BlazorPublishGZipCompressedFile" />
      <Output TaskParameter="CompressedFiles" ItemName="FileWrites" />
    </GZipCompress>

    <ItemGroup>
      <ResolvedFileToPublish Include="@(_BrotliCompressedFile)" />
      <ResolvedFileToPublish Include="@(_BlazorPublishGZipCompressedFile)" />
    </ItemGroup>
  </Target>

  <!--
    This is a hook to import a set of targets after the Blazor WebAssembly targets. By default this is unused.
  -->
  <Import Project="$(CustomAfterBlazorWebAssemblySdkTargets)" Condition="'$(CustomAfterBlazorWebAssemblySdkTargets)' != '' and Exists('$(CustomAfterBlazorWebAssemblySdkTargets)')"/>

</Project>
