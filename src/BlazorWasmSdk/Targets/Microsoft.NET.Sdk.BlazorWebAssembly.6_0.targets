<!--
***********************************************************************************************
Microsoft.NET.Sdk.BlazorWebAssembly.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved.
***********************************************************************************************
-->
<Project ToolsVersion="14.0">

  <PropertyGroup>
    <EnableDefaultContentItems Condition=" '$(EnableDefaultContentItems)' == '' ">true</EnableDefaultContentItems>

    <!-- Trimmer defaults that depend on user-definable settings.
        This must be configured before it's initialized in the .NET SDK targets (which are imported by the Razor SDK). -->
    <SuppressTrimAnalysisWarnings Condition="'$(SuppressTrimAnalysisWarnings)' == '' And '$(TrimmerDefaultAction)' != 'link'">true</SuppressTrimAnalysisWarnings>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Paths to tools, tasks, and extensions are calculated relative to the BlazorWebAssemblySdkDirectoryRoot. This can be modified to test a local build. -->
    <BlazorWebAssemblySdkDirectoryRoot Condition="'$(BlazorWebAssemblySdkDirectoryRoot)'==''">$(MSBuildThisFileDirectory)..\</BlazorWebAssemblySdkDirectoryRoot>
    <_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' == 'Core'">net8.0</_BlazorWebAssemblySdkTasksTFM>
    <_BlazorWebAssemblySdkTasksTFM Condition=" '$(MSBuildRuntimeType)' != 'Core'">net472</_BlazorWebAssemblySdkTasksTFM>
    <_BlazorWebAssemblySdkTasksAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\$(_BlazorWebAssemblySdkTasksTFM)\Microsoft.NET.Sdk.BlazorWebAssembly.Tasks.dll</_BlazorWebAssemblySdkTasksAssembly>
    <_BlazorWebAssemblySdkToolAssembly>$(BlazorWebAssemblySdkDirectoryRoot)tools\net8.0\Microsoft.NET.Sdk.BlazorWebAssembly.Tool.dll</_BlazorWebAssemblySdkToolAssembly>
  </PropertyGroup>

  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GenerateBlazorWebAssemblyBootJson" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BlazorWriteSatelliteAssemblyFile" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BlazorReadSatelliteAssemblyFile" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.BrotliCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.GzipCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.CreateBlazorTrimmerRootDescriptorFile" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.ComputeBlazorFilesToCompress" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.ComputeBlazorBuildAssets" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />
  <UsingTask TaskName="Microsoft.NET.Sdk.BlazorWebAssembly.ComputeBlazorPublishAssets" AssemblyFile="$(_BlazorWebAssemblySdkTasksAssembly)" />

  <PropertyGroup>
    <SelfContained>true</SelfContained>
    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>

    <!-- Runtime feature defaults to trim unnecessary code -->
    <InvariantGlobalization Condition="'$(InvariantGlobalization)' == ''">false</InvariantGlobalization>
    <EventSourceSupport Condition="'$(EventSourceSupport)' == ''">false</EventSourceSupport>
    <UseSystemResourceKeys Condition="'$(UseSystemResourceKeys)' == ''">true</UseSystemResourceKeys>
    <EnableUnsafeUTF7Encoding Condition="'$(EnableUnsafeUTF7Encoding)' == ''">false</EnableUnsafeUTF7Encoding>
    <HttpActivityPropagationSupport Condition="'$(HttpActivityPropagationSupport)' == ''">false</HttpActivityPropagationSupport>
    <NullabilityInfoContextSupport Condition="'$(NullabilityInfoContextSupport)' == ''">false</NullabilityInfoContextSupport>
    <_AggressiveAttributeTrimming Condition="'$(_AggressiveAttributeTrimming)' == ''">true</_AggressiveAttributeTrimming>
    <DebuggerSupport Condition="'$(DebuggerSupport)' == '' and '$(Configuration)' != 'Debug'">false</DebuggerSupport>
    <BlazorCacheBootResources Condition="'$(BlazorCacheBootResources)' == ''">true</BlazorCacheBootResources>

    <!-- Turn off parts of the build that do not apply to WASM projects -->
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <GenerateRuntimeConfigurationFiles>false</GenerateRuntimeConfigurationFiles>
    <PreserveCompilationContext>false</PreserveCompilationContext>
    <PreserveCompilationReferences>false</PreserveCompilationReferences>
    <IsWebConfigTransformDisabled>true</IsWebConfigTransformDisabled>

    <!-- Don't generate a NETSDK1151 error if a non self-contained Exe references a Blazor Exe -->
    <ShouldBeValidatedAsExecutableReference>false</ShouldBeValidatedAsExecutableReference>

    <_TargetingNET60OrLater Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp' AND $([MSBuild]::VersionGreaterThanOrEquals('$(TargetFrameworkVersion)', '6.0'))">true</_TargetingNET60OrLater>

    <!-- JS Modules -->
    <!-- We disable the manifest generation because we are going to inline the modules in the blazor.boot.json manifest -->
    <GenerateJSModuleManifest>false</GenerateJSModuleManifest>

    <DisableAutoWasmBuildApp>true</DisableAutoWasmBuildApp>
    <DisableAutoWasmPublishApp>true</DisableAutoWasmPublishApp>
    <EnableDefaultWasmAssembliesToBundle>false</EnableDefaultWasmAssembliesToBundle>
    <WasmNestedPublishAppDependsOn>_GatherWasmFilesToPublish;$(WasmNestedPublishAppDependsOn)</WasmNestedPublishAppDependsOn>
    <BlazorEnableCompression Condition="'$(WasmBuildingForNestedPublish)' == 'true'">false</BlazorEnableCompression>
    <_WasmNestedPublishAppPreTarget>ComputeFilesToPublish</_WasmNestedPublishAppPreTarget>
  </PropertyGroup>

  <ItemGroup>
    <!-- Configuration for the platform compatibility analyzer. See https://github.com/dotnet/designs/blob/main/accepted/2020/platform-exclusion/platform-exclusion.md#build-configuration-for-platforms -->
    <SupportedPlatform Remove="@(SupportedPlatform)" />
    <SupportedPlatform Include="browser" />
  </ItemGroup>

  <!-- Wire-up static web assets -->
  <PropertyGroup>
    <ResolveStaticWebAssetsInputsDependsOn>
      $(ResolveStaticWebAssetsInputsDependsOn);
      _AddBlazorWasmStaticWebAssets;
    </ResolveStaticWebAssetsInputsDependsOn>

    <StaticWebAssetsPrepareForRunDependsOn>
      _GenerateBuildBlazorBootJson;
      $(StaticWebAssetsPrepareForRunDependsOn)
    </StaticWebAssetsPrepareForRunDependsOn>

    <ResolvePublishStaticWebAssetsDependsOn Condition="'$(WasmBuildingForNestedPublish)' != 'true'">
      $(ResolvePublishStaticWebAssetsDependsOn);
      ProcessPublishFilesForBlazor;
      ComputeBlazorExtensions;
      _AddPublishBlazorBootJsonToStaticWebAssets;
    </ResolvePublishStaticWebAssetsDependsOn>

    <GenerateStaticWebAssetsPublishManifestDependsOn Condition="'$(WasmBuildingForNestedPublish)' != 'true'">
      $(GenerateStaticWebAssetsPublishManifestDependsOn);
      GeneratePublishBlazorBootJson;
    </GenerateStaticWebAssetsPublishManifestDependsOn>

  </PropertyGroup>

  <Import Project="Microsoft.NET.Sdk.BlazorWebAssembly.ServiceWorkerAssetsManifest.targets" Condition="'$(ServiceWorkerAssetsManifest)' != ''" />
  <Import Project="Microsoft.NET.Sdk.BlazorWebAssembly.Runtime.targets" />
  <Import Project="Microsoft.NET.Sdk.BlazorWebAssembly.StaticWebAssets.targets" />

  <!-- Just print a message here, static web assets takes care of all the copying -->
  <Target Name="_BlazorCopyFilesToOutputDirectory" AfterTargets="CopyFilesToOutputDirectory">
    <Message Importance="High" Text="$(MSBuildProjectName) (Blazor output) -&gt; $(TargetDir)wwwroot" Condition="'$(CopyBuildOutputToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)'!='true'" />
  </Target>

  <Target Name="BlazorBuildFiles" AfterTargets="_ResolveBlazorWasmOutputs">

    <ItemGroup>
      <_BlazorJSFile Include="$(BlazorWebAssemblyJSPath)" />
      <_BlazorJSFile Include="$(BlazorWebAssemblyJSMapPath)" Condition="Exists('$(BlazorWebAssemblyJSMapPath)')" />

      <_BlazorConfigFileCandidates Include="wwwroot\appsettings*.json" />

    </ItemGroup>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorJSFile)"
      SourceId="$(PackageId)"
      SourceType="Computed"
      AssetKind="All"
      AssetRole="Primary"
      AssetTraitName="BlazorWebAssemblyResource"
      AssetTraitValue="boot"
      CopyToOutputDirectory="PreserveNewest"
      CopyToPublishDirectory="PreserveNewest"
      ContentRoot="$(OutputPath)wwwroot"
      BasePath="$(StaticWebAssetBasePath)"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorStaticWebAsset" />
    </DefineStaticWebAssets>

    <DefineStaticWebAssets
      CandidateAssets="@(_BlazorConfigFileCandidates)"
      AssetTraitName="BlazorWebAssemblyResource"
      AssetTraitValue="settings"
      RelativePathFilter="appsettings*.json"
    >
      <Output TaskParameter="Assets" ItemName="_BlazorJsConfigStaticWebAsset" />
    </DefineStaticWebAssets>

    <ItemGroup>
      <!-- Update the config blazor static web asset since we've given it a trait -->
      <StaticWebAsset Remove="@(_BlazorJsConfigStaticWebAsset)" />
      <StaticWebAsset Include="@(_BlazorJsConfigStaticWebAsset)" />

      <ReferenceCopyLocalPaths Remove="@(_BlazorBuildFilesToRemove)" />
    </ItemGroup>
  </Target>

  <Target
    Name="ComputeBlazorExtensions"
    AfterTargets="ProcessPublishFilesForBlazor"
    DependsOnTargets="$(ComputeBlazorExtensionsDependsOn)" >
    <ItemGroup>
      <_BlazorExtensionsCandidate Include="@(BlazorPublishExtension->'%(FullPath)')">
        <SourceId>$(PackageId)</SourceId>
        <SourceType>Computed</SourceType>
        <ContentRoot>$(PublishDir)wwwroot</ContentRoot>
        <BasePath>$(StaticWebAssetBasePath)</BasePath>
        <RelativePath>%(BlazorPublishExtension.RelativePath)</RelativePath>
        <AssetKind>Publish</AssetKind>
        <AssetMode>All</AssetMode>
        <AssetRole>Primary</AssetRole>
        <AssetTraitName>BlazorWebAssemblyResource</AssetTraitName>
        <AssetTraitValue>extension:%(BlazorPublishExtension.ExtensionName)</AssetTraitValue>
        <CopyToOutputDirectory>Never</CopyToOutputDirectory>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <OriginalItemSpec>%(BlazorPublishExtension.Identity)</OriginalItemSpec>
      </_BlazorExtensionsCandidate>
    </ItemGroup>

    <DefineStaticWebAssets CandidateAssets="@(_BlazorExtensionsCandidate)">
      <Output TaskParameter="Assets" ItemName="StaticWebAsset" />
      <Output TaskParameter="Assets" ItemName="_BlazorExtensionsCandidatesForPublish" />
    </DefineStaticWebAssets>

  </Target>

  <Target Name="_AddBlazorWebConfigFile" AfterTargets="ILLink">
    <ItemGroup Condition="'@(ResolvedFileToPublish->AnyHaveMetadataValue('RelativePath', 'web.config'))' != 'true'">
      <ResolvedFileToPublish
         Include="$(MSBuildThisFileDirectory)BlazorWasm.web.config"
         ExcludeFromSingleFile="true"
         CopyToPublishDirectory="PreserveNewest"
         RelativePath="web.config" />
    </ItemGroup>
  </Target>

</Project>
